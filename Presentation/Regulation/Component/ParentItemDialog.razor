@typeparam T where T : class, IRegulationItem

@using PayrollEngine.WebApp.ViewModel
@using PayrollEngine.WebApp.Shared
<MudDialog Gutters="false" Style="min-width: 25em" TitleClass="mud-theme-primary pe-dialog-title">
    <DialogContent>
        <div class="px-6">
            <MudStack Class="border rounded" Style="max-height: 20em; overflow-y: scroll">
                <MudList T="string" Dense="true"
                         SelectionMode="SelectionMode.SingleSelection"
                         @ondblclick="@Submit"
                         SelectedValueChanged="SelectedValueChanged">
                    @foreach (var item in Items)
                    {
                        <MudListItem T="string" Value="@item.Name" Text="@item.InheritanceKey"/>
                    }
                </MudList>
            </MudStack>
        </div>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="@Globals.ButtonVariant" OnClick="Cancel">@Localizer.Dialog.Cancel</MudButton>
            <MudButton Variant="@Globals.ButtonVariant" Color="Color.Primary" OnClick="Submit">@Localizer.Dialog.Ok</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public List<T> Items { get; set; } = [];
    [Inject] private ILocalizerService LocalizerService { get; set; }

    private Localizer Localizer => LocalizerService.Localizer;

    private string SelectedValue { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private void Submit()
    {
        if (string.IsNullOrWhiteSpace(SelectedValue))
        {
            MudDialog.Cancel();
        }
        MudDialog.Close(DialogResult.Ok(SelectedValue));
    }

    private void SelectedValueChanged(string obj) =>
        SelectedValue = obj;
}