@using PayrollEngine.Client.Model
@using PayrollEngine.Client.Service
@using ReportSet = PayrollEngine.WebApp.ViewModel.ReportSet
@using PayrollEngine.Client.QueryExpression;
@using PayrollEngine.WebApp.Shared
@using Task = System.Threading.Tasks.Task

<MudDialog style="min-width: 40em" TitleClass="mud-theme-primary pe-dialog-title">
    <DialogContent>
        <MudDataGrid T="ReportLog" 
                     Items="ReportLogs"
                     Filterable="false"
                     Dense="true"
                     SortMode="SortMode.None"
                     Groupable="false"
                     ShowColumnOptions="false">
            <Columns>
                <PropertyColumn Property="x => x.Message" Title="@Localizer.ReportLog.Message" />
                <PropertyColumn Property="x => x.User" Title="@Localizer.User.User" />
                <PropertyColumn Property="x => x.Key" Title="@Localizer.Shared.Key" />
                <PropertyColumn Property="x => x.ReportDate" Title="@Localizer.ReportLog.ReportDate">
                    <CellTemplate>
                        @ValueFormatter.ToCompactString(context.Item.ReportDate)
                    </CellTemplate>
                </PropertyColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ReportLog" RowsPerPageString="@Localizer.DataGrid.PagerRowsPerPage"
                                  InfoFormat="@Localizer.DataGrid.PagerInfoFormat" />
            </PagerContent>
            <NoRecordsContent>
                @Localizer.ReportLog.NotAvailable
            </NoRecordsContent>
        </MudDataGrid>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="@Globals.ButtonVariant" Color="Color.Primary" OnClick="Close">@Localizer.Dialog.Ok</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Tenant Tenant { get; set; }
    [Parameter] public ReportSet Report { get; set; }
    [Parameter] public IValueFormatter ValueFormatter { get; set; }

    [Inject] private IReportLogService ReportLogService { get; set; }
    [Inject] private Localizer Localizer { get; set; }

    private List<ReportLog> ReportLogs { get; set; } = [];

    private void Close() => MudDialog.Close(DialogResult.Ok(true));

    protected override async Task OnInitializedAsync()
    {
        ReportLogs = await ReportLogService.QueryAsync<ReportLog>(
            new(Tenant.Id), new()
                {
                    Filter = new Equals(nameof(ReportLog.ReportName), Report.Name)
                });
        await base.OnInitializedAsync();
    }

}