@inherits FieldEditorBase

<MudStack Row="true" Spacing="0" Style="width: 100%">
    <MudDatePicker @bind-Date="@Date"
                   DateFormat="@DateFormat"
                   Culture="@Culture"
                   Editable="true"
                   MinDate="@MinValue"
                   MaxDate="@MaxValue"
                   OpenTo="@OpenTo"
                   Label="@ValueLabel"
                   HelperText="@ValueHelp"
                   Error="@Error"
                   Disabled="@Disabled"
                   ReadOnly="@ReadOnly"
                   Required="@Required"
                   RequiredError="@ValueRequiredError" />
    <MudTimePicker @bind-Time="@Time"
                   TimeFormat="@TimeFormat"
                   Culture="@Culture"
                   Editable="true"
                   Disabled="@Disabled"
                   Required="@Required"
                   ReadOnly="@ReadOnly"
                   Error="@Error" />
</MudStack>

@code {
    private string DateFormat { get; set; }
    private string TimeFormat { get; set; }
    private DateTime? MinValue { get; set; }
    private DateTime? MaxValue { get; set; }
    private OpenTo OpenTo { get; set; }

    private DateTime? Date
    {
        get => Field.ValueAsDateTime?.Date;
        set
        {
            if (value == null)
            {
                // reset date and time
                Field.ValueAsDateTime = null;
            }
            else
            {
                var existing = Field.ValueAsDateTime;
                if (existing == null)
                {
                    Field.ValueAsDateTime = value;
                    return;
                }

                // keep time
                Field.ValueAsDateTime = value.Value.Add(existing.Value.TimeOfDay);
            }
        }
    }

    private TimeSpan? Time
    {
        get => Field.ValueAsDateTime?.TimeOfDay;
        set
        {
            var existing = Field.ValueAsDateTime;
            if (value == null)
            {
                // keep date
                Field.ValueAsDateTime = existing?.Date;
            }
            else
            {
                if (existing == null)
                {
                    // time of today
                    Field.ValueAsDateTime = DateTime.Today + value;
                }
                else
                {
                    // keep date
                    Field.ValueAsDateTime = existing.Value.Date + value;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DateFormat = Field.Attributes.GetFormat(Culture) ??
                     Culture.DateTimeFormat.ShortDatePattern;
        TimeFormat = Culture.DateTimeFormat.ShortTimePattern;
        MinValue = Field.Attributes.GetMinDateTimeValue(Culture);
        MaxValue = Field.Attributes.GetMaxDateTimeValue(Culture);
        OpenTo = (Field.Attributes.GetValuePickerOpen(Culture) ?? DatePickerType.Day) switch
        {
            DatePickerType.Month => OpenTo.Month,
            DatePickerType.Year => OpenTo.Year,
            _ => OpenTo.Date
        };

        await base.OnInitializedAsync();
    }
}