@inherits FieldEditorBase;

<MudSelect T="int?"
           @bind-Value="Field.ValueAsInteger"
           Culture="@Culture"
           Label="@ValueLabel"
           HelperText="@ValueHelp"
           Error="@Error"
           Variant="@Variant"
           Dense="true"
           Disabled="@ValuesDisabled"
           ReadOnly="@ReadOnly"
           Required="@Required"
           RequiredError="@ValueRequiredError"
           Adornment="@ValueAdornment"
           AdornmentText="@ValueAdornmentText">
    @foreach (var weekday in Weekdays)
    {
        <MudSelectItem T="int?" Value="@weekday.Item1">@weekday.Item2</MudSelectItem>
    }
</MudSelect>

@code
{
    private List<Tuple<int, string>> Weekdays { get; } = [];

    private bool ValuesDisabled =>
        Disabled || !Weekdays.Any();

    private void SetupWeekdays()
    {
        var culture = Culture;
        // day names
        var dayNames = culture.DateTimeFormat.DayNames.ToList();

        // day order
        var firstDayOfWeek = culture.DateTimeFormat.GetDayName(culture.DateTimeFormat.FirstDayOfWeek);
        var currentDay = dayNames.First();
        while (currentDay != null)
        {
            if (string.Equals(currentDay, firstDayOfWeek))
            {
                break;
            }

            // move day to the end of the week
            dayNames.Remove(currentDay);
            dayNames.Add(currentDay);

            // next day
            currentDay = dayNames.First();
        }

        // apply days
        for (var i = 0; i < dayNames.Count; i++)
        {
            Weekdays.Add(new(i, dayNames[i]));
        }
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        // label
        SetValueLabel(Field.Attributes.GetValueLabel(Culture) ?? Localizer.Calendar.Day);
        // weekday names
        SetupWeekdays();

        await base.OnInitializedAsync();
    }
}
