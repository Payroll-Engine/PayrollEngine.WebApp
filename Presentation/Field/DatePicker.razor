@inherits FieldEditorBase

<MudDatePicker @bind-Date="@Field.ValueAsDateTime"
               DateFormat="@DateFormat"
               Culture="@Culture"
               MinDate="@MinValue"
               MaxDate="@MaxValue"
               Editable="true"
               Rounded="true"
               Margin="Margin.Dense"
               OpenTo="@OpenTo"
               Variant="@Variant"
               Style="@Style"
               Label="@ValueLabel"
               HelperText="@ValueHelp"
               Error="@Error"
               Disabled="@Disabled"
               ReadOnly="@ReadOnly"
               PickerVariant="@PickerVariant"
               Orientation="@Orientation"
               Required="@Required"
               RequiredError="@ValueRequiredError" />

@code {

    private string DateFormat { get; set; }
    private string Style { get; set; }
    private DateTime? MinValue { get; set; }
    private DateTime? MaxValue { get; set; }
    private OpenTo OpenTo { get; set; }
    private PickerVariant PickerVariant { get; set; }
    private Orientation Orientation { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        DateFormat = Field.Attributes.GetFormat(Culture) ??
                     Culture.DateTimeFormat.ShortDatePattern;
        MinValue = Field.Attributes.GetMinDateTimeValue(Culture);
        MaxValue = Field.Attributes.GetMaxDateTimeValue(Culture);

        OpenTo = (Field.Attributes.GetValuePickerOpen(Culture) ?? DatePickerType.Day) switch
        {
            DatePickerType.Month => OpenTo.Month,
            DatePickerType.Year => OpenTo.Year,
            _ => OpenTo.Date
        };

        PickerVariant = Field.Attributes.GetValuePickerStatic(Culture) ?? false ?
            PickerVariant.Static : PickerVariant.Inline;

        Orientation = PickerVariant == PickerVariant.Static ?
            Orientation.Landscape : Orientation.Portrait;

        Style = PickerVariant == PickerVariant.Static ? "zoom: 0.8" : null;

        await base.OnInitializedAsync();
    }
}