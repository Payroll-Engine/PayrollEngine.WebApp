@using PayrollEngine.WebApp.Shared
@inherits FieldEditorBase;

<MudSelect T="int?"
@bind-Value="Field.ValueAsInteger"
           Culture="@EditCulture"
           Label="@ValueLabel"
           HelperText="@ValueHelp"
           Error="@Error"
           Disabled="@ValuesDisabled"
           ReadOnly="@ReadOnly"
           Required="@Required"
           RequiredError="@ValueRequiredError"
           Adornment="@ValueAdornment"
           AdornmentText="@ValueAdornmentText">
    @foreach (var month in Months)
    {
        <MudSelectItem T="int?" Value="@month.Item1">@month.Item2</MudSelectItem>
    }
</MudSelect>

@code
{
    [Inject] private Localizer Localizer { get; set; }

    private List<Tuple<int, string>> Months { get; } = new();

    private bool ValuesDisabled =>
        Disabled || !Months.Any();

    protected override async Task OnInitializedAsync()
    {
        // label
        SetValueLabel(Field.Attributes.GetValueLabel(Culture) ?? Localizer.Calendar.Month);

        // month names
        var monthNames = EditCulture.DateTimeFormat.MonthNames.
            Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
        for (var i = 0; i < monthNames.Count; i++)
        {
            Months.Add(new(i + 1, monthNames[i]));
        }

        await base.OnInitializedAsync();
    }
}
