@using PayrollEngine.WebApp.Shared
@inherits PayrollEngine.WebApp.Presentation.Field.DateTimePickerBase

@if (!Hidden)
{
    <MudStack Row="true" Spacing="0" Class="align-baseline">
        <MudDatePicker @bind-Date="@Date"
                       MinDate="@MinDate"
                       MaxDate="@MaxDate"
                       Culture="@Culture"
                       DateFormat="@DateFormat"
                       Label="@DateLabel"
                       Mask="@Mask"
                       ReadOnly="@ReadOnly"
                       Error="@Error"
                       RequiredError="@RequiredError"
                       HelperText="@Help"
                       Required="@Required"
                       Margin="@Margin.Dense"
                       Variant="@Variant"
                       Class="@Class"
                       Editable="true" />
        <MudTimePicker Class="pl-4"
                       @bind-Time="@Time"
                       Error="@Error"
                       Culture="@Culture"
                       TimeFormat="@TimeFormat"
                       Required="@Required"
                       ReadOnly="@ReadOnly"
                       Editable="true" />
    </MudStack>
}

@code {
    [Parameter] public DateTime? DateTime { get; set; }
    [Parameter] public EventCallback<DateTime?> DateTimeChanged { get; set; }
    [Parameter] public DateTime? MinDate { get; set; }
    [Parameter] public DateTime? MaxDate { get; set; }
    [Parameter] public IMask Mask { get; set; }
    [Inject] private ILocalizerService LocalizerService { get; set; }

    private Localizer Localizer => LocalizerService.Localizer;
    private string DateLabel { get; set; }
    private string DateFormat { get; set; }
    private string TimeFormat { get; set; }
    private string RequiredError { get; set; }
    private string Help { get; set; }
    private bool ReadOnly { get; set; }

    private bool Required =>
        Field.EndMandatory && (Field.Start.HasValue || !string.IsNullOrWhiteSpace(Field.Value));

    private bool Error => !Field.Validator.ValidateEnd();
    private bool Hidden => (Attributes.GetEndHidden(Culture) ?? false) ||
                           (Attributes.GetFieldLayout(Culture) ?? default) is
                           FieldLayoutMode.StartValue or
                           FieldLayoutMode.Value or
                           FieldLayoutMode.ValueCompact;

    private DateTime? Date
    {
        get => DateTime?.Date;
        set
        {
            if (value == DateTime?.Date)
            {
                return;
            }

            DateTime? dateTime;
            if (value != null && Time.HasValue)
            {
                dateTime = value.Value.Add(Time.Value);
            }
            else
            {
                dateTime = value;
            }
            SetDateTime(dateTime);
        }
    }

    private TimeSpan? Time
    {
        get => DateTime?.TimeOfDay;
        set
        {
            if (value == DateTime?.TimeOfDay)
            {
                return;
            }

            DateTime? dateTime = null;
            if (value == null)
            {
                if (Date.HasValue)
                {
                    dateTime = Date.Value.Date;
                }
            }
            else if (Date.HasValue)
            {
                dateTime = Date.Value.Date.Add(value.Value);
            }
            else
            {
                dateTime = System.DateTime.Today.Add(value.Value);
            }
            SetDateTime(dateTime);
        }
    }

    private void SetDateTime(DateTime? dateTime)
    {
        if (dateTime == DateTime)
        {
            return;
        }
        // change
        DateTime = dateTime;

        // event
        DateTimeChanged.InvokeAsync(dateTime).Wait();
    }

    protected override DatePickerType DatePickerType =>
        Attributes.GetEndPickerOpen(Culture) ?? DatePickerType.Day;

    protected override DateTimePickerType DateTimePickerType =>
        Attributes.GetEndPickerType(Culture) ?? DateTimePickerType.DatePicker;

    protected override async Task OnInitializedAsync()
    {
        DateLabel = Attributes.GetEndLabel(Culture) ?? Localizer.Shared.End;
        DateFormat = Attributes.GetEndFormat(Culture) ??
                     Culture.DateTimeFormat.ShortDatePattern;
        TimeFormat = Culture.DateTimeFormat.ShortTimePattern;
        RequiredError = Attributes.GetEndRequired(Culture);
        ReadOnly = Attributes.GetEndReadOnly(Culture) ?? false;
        Help = Attributes.GetEndHelp(Culture);
        // keep the edit row layout in sync with the value edit
        if (HasValueHelp && string.IsNullOrWhiteSpace(Help))
        {
            Help = Localizer.Shared.End;
        }

        await base.OnInitializedAsync();
    }
}