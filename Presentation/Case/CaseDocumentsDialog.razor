@using PayrollEngine.Client.Model
@using Microsoft.JSInterop
@using Task = System.Threading.Tasks.Task
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

@typeparam TDoc where TDoc : CaseDocument, new()

@inject IJSRuntime JsRuntime;

<MudDialog style="min-width: 40em">
    <DialogContent>
        @* add document *@
        <div class="d-flex flex-grow-1 pb-2">
            Case documents
            @if (Editable)
            {
                <div class="d-flex flex-grow-1 justify-end">
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadAsync" Accept="@Accept">
                        <ButtonTemplate>
                            <MudTooltip Delay="500" Text="Upload document" Placement="Placement.Top">
                                <MudIconButton for="@context"
                                           HtmlTag="label"
                                           Color="Color.Tertiary"
                                           Variant="Variant.Outlined"
                                           Icon="@Icons.Material.Filled.Upload"
                                           Size="Size.Small">
                                </MudIconButton>
                            </MudTooltip>
                        </ButtonTemplate>
                    </MudFileUpload>
                </div>
            }
        </div>

        <MudDataGrid T="TDoc" Items="Documents"
                     Filterable="false"
                     Dense="true"
                     SortMode="SortMode.None"
                     Groupable="false"
                     ShowColumnOptions="false">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <TemplateColumn T="TDoc" CellStyle="text-align: right">
                    <CellTemplate>
                        @if (Editable)
                        {
                            <MudTooltip Delay="500" Text="@($"Remove {context.Item.Name}")" Placement="Placement.Top">
                                <MudIconButton @onclick="@(() => DeleteAsync(context.Item))"
                                           Color="Color.Secondary"
                                           Variant="Variant.Outlined"
                                           Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Delay="500" Text="@($"Download {context.Item.Name}")" Placement="Placement.Top">
                                <MudIconButton @onclick="@(() => DownloadAsync(context.Item))"
                                           Color="Color.Primary"
                                           Variant="Variant.Outlined"
                                           Icon="@Icons.Material.Filled.Download"
                                           Size="Size.Small" />
                            </MudTooltip>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                No documents available
            </NoRecordsContent>
        </MudDataGrid>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ObservedHashSet<TDoc> Documents { get; set; }
    [Parameter] public string Accept { get; set; }
    [Parameter] public bool Editable { get; set; }

    [Inject] private IUserNotificationService UserNotification { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async Task DownloadAsync(TDoc document)
    {
        try
        {
            await JsRuntime.SaveAs(document.Name, Convert.FromBase64String(document.Content));
        }
        catch (Exception exception)
        {
            await UserNotification.ShowErrorMessageBoxAsync("Case documents error", exception);
        }
    }

    private async Task UploadAsync(IBrowserFile file)
    {
        try
        {
            await using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            var document = new TDoc
                {
                    Name = file.Name,
                    ContentType = file.ContentType,
                    Content = Convert.ToBase64String(memoryStream.ToArray())
                };
            await Documents.AddAsync(document);
            await UserNotification.ShowSuccessAsync($"Document {file.Name} uploaded");
        }
        catch (Exception exception)
        {
            await UserNotification.ShowErrorMessageBoxAsync("Case documents error", exception);
        }
    }

    private async Task DeleteAsync(TDoc document)
    {
        if (!Documents.Contains(document))
        {
            return;
        }
        await Documents.RemoveAsync(document);
        await UserNotification.ShowSuccessAsync($"Document {document.Name} removed");
        StateHasChanged();
    }
}