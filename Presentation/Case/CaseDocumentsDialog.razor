@using PayrollEngine.Client.Model
@using Microsoft.JSInterop
@using Task = System.Threading.Tasks.Task
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using PayrollEngine.WebApp.Shared

@typeparam TDoc where TDoc : CaseDocument, new()

@inject IJSRuntime JsRuntime;

<MudDialog style="min-width: 40em" TitleClass="mud-theme-primary pe-dialog-title">
    <DialogContent>
        @* add document *@
        <div class="d-flex flex-grow-1 pb-2">
            Case documents
            @if (Editable)
            {
                <div class="d-flex flex-grow-1 justify-end">
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadAsync" Accept="@Accept">
                        <ActivatorContent>
                            <MudTooltip Delay="1000" Text="@Localizer.Document.ContentUpload" Placement="Placement.Top">
                                <MudIconButton HtmlTag="label"
                                               Color="Color.Tertiary"
                                               Variant="@Globals.ButtonVariant"
                                               Icon="@Icons.Material.Filled.Upload"
                                               Size="Size.Small">
                                </MudIconButton>
                            </MudTooltip>
                        </ActivatorContent>
                    </MudFileUpload>
                </div>
            }
        </div>

        <MudDataGrid T="TDoc" 
                     Items="Documents"
                     Filterable="false"
                     Dense="true"
                     SortMode="SortMode.None"
                     Groupable="false"
                     ShowColumnOptions="false">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="@Localizer.Shared.Name" />
                <PropertyColumn Property="x => x.ContentType" Title="@Localizer.Document.ContentType" />
                <TemplateColumn T="TDoc" CellStyle="text-align: right">
                    <CellTemplate>
                        @if (Editable)
                        {
                            <MudTooltip Delay="1000" Text="@Localizer.Item.RemoveTitle(context.Item.Name)" Placement="Placement.Top">
                                <MudIconButton @onclick="@(() => DeleteAsync(context.Item))"
                                               Color="Color.Secondary"
                                               Variant="@Globals.ButtonVariant"
                                               Icon="@Icons.Material.Filled.Delete"
                                               Size="Size.Small" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Delay="1000" Text="@Localizer.Document.DownloadTitle(context.Item.Name)" Placement="Placement.Top">
                                <MudIconButton @onclick="@(() => DownloadAsync(context.Item))"
                                               Color="Color.Primary"
                                               Variant="@Globals.ButtonVariant"
                                               Icon="@Icons.Material.Filled.Download"
                                               Size="Size.Small" />
                            </MudTooltip>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                @Localizer.Document.NotAvailable
            </NoRecordsContent>
        </MudDataGrid>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="@Globals.ButtonVariant" Color="Color.Primary" OnClick="Submit">@Localizer.Dialog.Close</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public ObservedHashSet<TDoc> Documents { get; set; }
    [Parameter] public string Accept { get; set; }
    [Parameter] public bool Editable { get; set; }

    [Inject] private IUserNotificationService UserNotification { get; set; }
    [Inject] private IDownloadService DownloadService { get; set; }
    [Inject] private ILocalizerService LocalizerService { get; set; }

    private Localizer Localizer => LocalizerService.Localizer;

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async Task DownloadAsync(TDoc document)
    {
        try
        {
            var name = document.Name;
            var typeProvider = new FileExtensionContentTypeProvider();
            if (typeProvider.TryGetExtension(document.ContentType, out var extension))
            {
                name += extension;
            }

            await JsRuntime.SaveAs(name, Convert.FromBase64String(document.Content));
        }
        catch (Exception exception)
        {
            PayrollEngine.Log.Error(exception, exception.GetBaseMessage());
            await UserNotification.ShowErrorMessageBoxAsync(Localizer, Localizer.Document.Documents, exception);
        }
    }

    private async Task UploadAsync(IBrowserFile file)
    {
        try
        {
            await using var stream = file.OpenReadStream(DownloadService.MaxAllowedSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            var document = new TDoc
            {
                Name = file.Name,
                ContentType = file.ContentType,
                Content = Convert.ToBase64String(memoryStream.ToArray())
            };
            await Documents.AddAsync(document);
        }
        catch (Exception exception)
        {
            PayrollEngine.Log.Error(exception, exception.GetBaseMessage());
            await UserNotification.ShowErrorMessageBoxAsync(Localizer, Localizer.Document.Documents, exception);
        }
    }

    private async Task DeleteAsync(TDoc document)
    {
        if (!Documents.Contains(document))
        {
            return;
        }
        await Documents.RemoveAsync(document);
        StateHasChanged();
    }
}