@using PayrollEngine.WebApp.Presentation.Field

@inherits PayrollEngine.WebApp.Presentation.Component.MainComponentBase

@if (Field == null)
{
    return;
}

<MudStack Spacing="0">

    @* field group *@
    @if (HasGroup)
    {
        <MudPaper Class="my-2 px-2 py-1 gray darken-4 shades-text text-white" Elevation="1">
            <MudText>@Group</MudText>
        </MudPaper>
    }
    else if (Separator)
    {
        @* field separator *@
        <MudDivider Class="pb-2" />
    }

    @* field header *@
    <div class="d-flex">

        @* field name *@
        @if (!HiddenName && FieldLayout is FieldLayoutMode.StartEndValue or FieldLayoutMode.StartValue)
        {
            <MudTooltip Delay="@Globals.TooltipDelay" Text="@Field.GetLocalizedDescription(Culture)" Placement="Placement.Top">
                <MudText Class="pr-4 pb-1">@Field.GetLocalizedName(Culture)</MudText>
            </MudTooltip>
        }

        @* field actions *@
        <div class="d-flex flex-grow-1 justify-end">

            @* change history *@
            @if (UseChangeHistory && VisibleChangeHistory)
            {
                <MudTooltip Delay="@Globals.TooltipDelay" Text="@Localizer.Case.ChangeHistory" Placement="Placement.Top">
                    <MudIconButton @onclick="@ViewChangeHistoryAsync"
                                   Color="@(ChangeHistoryAvailable ? Color.Tertiary : Color.Primary)"
                                   Variant="@Globals.ToolButtonVariant"
                                   Style="zoom: 0.8"
                                   Icon="@Icons.Material.Sharp.History"
                                   Size="Size.Small" />
                </MudTooltip>
            }

            @* attachments *@
            @if (AttachmentsSupported)
            {
                @* attachment color: missing mandatory (error), available (tertiary) and empty (primary) *@
                <MudTooltip Delay="@Globals.TooltipDelay" Text="@Localizer.CaseField.FieldDocuments" Placement="Placement.Top">
                    <MudIconButton @onclick="@(() => EditAttachmentsAsync(Field))"
                                   Color="@(!AttachmentsValid ?
                                          Color.Error :
                                          AttachmentsAvailable ?
                                              Color.Tertiary :
                                              Color.Primary)"
                                   Variant="@Globals.ToolButtonVariant"
                                   Class="ml-2"
                                   Style="zoom: 0.8"
                                   Icon="@Icons.Material.Filled.AttachFile"
                                   Size="Size.Small" />
                </MudTooltip>
            }
        </div>
    </div>

    @* field description *@
    @if (!string.IsNullOrWhiteSpace(Field.Description) && (Field.Attributes.GetShowDescription(Culture) ?? false))
    {
        <div>@Field.GetDescriptionMarkup()</div>
    }

    @* field inputs: start, end and value *@
    <MudStack Row="true" Spacing="0" Class="d-flex">

        @* field start *@
        @if (FieldLayout is not FieldLayoutMode.ValueCompact)
        {
            <div style="@($"{GetStartStyle()}; align-self: flex-end;")">
                @if (Field.StartAvailable())
                {
                    var pickerType = Field.Attributes.GetStartPickerType(Culture) ?? DateTimePickerType.DatePicker;
                    if (pickerType is DateTimePickerType.DatePicker)
                    {
                        <CaseStartDatePicker @bind-Date="@Field.Start"
                                             Field="@Field"
                                             Culture="@Culture"
                                             Attributes="@Field.Attributes"
                                             MaxDate="@Field.End"
                                             Variant="@Variant" />
                    }
                    else if (pickerType == DateTimePickerType.DateTimePicker)
                    {
                        <CaseStartDateTimePicker @bind-DateTime="@Field.Start"
                                                 Field="@Field"
                                                 Culture="@Culture"
                                                 Attributes="@Field.Attributes"
                                                 MaxDate="@Field.End"
                                                 Variant="@Variant" />
                    }
                }
            </div>
        }

        @* field end *@
        @if (FieldLayout is not FieldLayoutMode.ValueCompact)
        {
            <div class="mx-8" style="@($"{GetEndStyle()}; align-self: flex-end;")">
                @if (Field.EndAvailable())
                {
                    var pickerType = Field.Attributes.GetEndPickerType(Culture);
                    if (pickerType is null or DateTimePickerType.DatePicker)
                    {
                        <CaseEndDatePicker @bind-Date="@Field.End"
                                           Field="@Field"
                                           Culture="@Culture"
                                           Attributes="@Field.Attributes"
                                           MinDate="@Field.Start"
                                           Variant="@Variant" />
                    }
                    else if (pickerType == DateTimePickerType.DateTimePicker)
                    {
                        <CaseEndDateTimePicker @bind-DateTime="@Field.End"
                                               Field="@Field"
                                               Culture="@Culture"
                                               Attributes="@Field.Attributes"
                                               MinDate="@Field.Start"
                                               Variant="@Variant" />
                    }
                }
            </div>
        }

        @* field value *@
        <div style="@GetValueStyle()">
            @if (Field.ValueTypeAvailable())
            {
                <div class="d-flex flex-grow-1 justify-end">
                    @if (Field.LookupSettings == null)
                    {
                        // regular case field
                        <FieldEditor Field="@Field" Culture="@Culture" />
                    }
                    else
                    {
                        // lookup case field
                        <LookupEditor Field="@Field" Culture="@Culture" />
                    }
                </div>
            }
        </div>
    </MudStack>
</MudStack>
