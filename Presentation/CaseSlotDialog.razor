@using PayrollEngine.Client.Model
@using Task = System.Threading.Tasks.Task

<MudDialog Class="attribute-dialog">
    <DialogContent>
        <MudForm @ref="form">
            <MudTextField T="string" @bind-Value="CaseSlot.Name"
                          Label="Name"
                          Validation="@(new Func<string, string>(ValidateName))"
                          Required="true" RequiredError="Name is required"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Language"
                          AdornmentColor="@LocalizationColor"
                          AdornmentAriaLabel="@LocalizationHelp"
                          OnAdornmentClick="OpenLocalizationsAsync" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    MudForm form;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ItemCollection<CaseSlot> CaseSlots { get; set; }
    [Parameter] public CaseSlot CaseSlot { get; set; } = new();
    [Parameter] public bool ReadOnly { get; set; }
    public int MaxLength { get; set; } = 524288;

    [Inject]
    private IDialogService DialogService { get; set; }

    #region Localizations

    private Dictionary<string, string> Localizations { get; } = new();

    private Color LocalizationColor =>
        Localizations.Any() ? Color.Tertiary : Color.Primary;

    private readonly string LocalizationHelp = "Localizations";

    private async Task OpenLocalizationsAsync()
    {
        var parameters = new DialogParameters
        {
            { nameof(LocalizationsDialog.LocalizationBase), CaseSlot.Name },
            { nameof(LocalizationsDialog.ReadOnly), ReadOnly },
            { nameof(LocalizationsDialog.Localizations), Localizations },
            { nameof(LocalizationsDialog.MaxLength), MaxLength }
        };
        var result = await (await DialogService.ShowAsync<LocalizationsDialog>(
            "Case slot localizations", parameters)).Result;
        if (result == null || result.Canceled)
        {
            return;
        }

    // localizations
        var localizations = result.Data as Dictionary<string, string>;
        if (localizations == null)
        {
            return;
        }
        SetItemLocalizations(localizations);
    }

    private Dictionary<string, string> GetItemLocalizations()
    {
        var property = typeof(CaseSlot).GetLocalizationsProperty(nameof(CaseSlot.Name));
        var localizations = property.GetValue(CaseSlot) as Dictionary<string, string>;
        if (localizations == null)
        {
            return new();
        }
        return new(localizations);
    }

    private void SetItemLocalizations(Dictionary<string, string> localizations)
    {
        var existingLocalizations = GetItemLocalizations();
        if (CompareTool.EqualDictionaries((IDictionary<string, string>)localizations, existingLocalizations))
        {
            return;
        }

        var property = typeof(CaseSlot).GetLocalizationsProperty(nameof(CaseSlot.Name));
        property.SetValue(CaseSlot, localizations);
    }

    #endregion

    private string ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return "Name is required";
        }

        // existing
        var existing = CaseSlots.FirstOrDefault(x => string.Equals(x.Name, name));
        if (existing != null)
        {
            return "Name already in use";
        }
        return null;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        if (await form.Revalidate())
        {
            MudDialog.Close(DialogResult.Ok(CaseSlot));
        }
    }
}