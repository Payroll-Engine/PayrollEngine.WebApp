@using PayrollEngine.WebApp.ViewModel
@using PayrollEngine.WebApp.Shared
<MudTooltip Delay="200" Placement="Placement.Top" RootStyle="width: 100%">
    <ChildContent>
        <MudTextField T="string"
                      ReadOnly="true"
                      Margin="Margin.Dense"
                      Value="@Label"
                      Class="@Class"
                      Adornment="Adornment.End"
                      Variant="Variant.Outlined"
                      AdornmentIcon="@Icons.Material.Filled.Info" />
    </ChildContent>
    <TooltipContent>
        @if (Employees != null && Employees.Any())
        {
            <MudStack Class="pa-2">
                <MudText Typo="Typo.h6" Align="Align.Start">@Localizer.Employee.Employees</MudText>
                <div>
                    <table>
                        @foreach (var employee in Employees.Where(IsSelectedEmployee))
                        {
                            <tr>
                                <td>
                                    <MudText Typo="Typo.body2" Align="Align.Start" Class="pr-8">
                                        @employee.FullName
                                    </MudText>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </MudStack>
        }
    </TooltipContent>
</MudTooltip>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public List<Employee> Employees { get; set; } = [];
    [Parameter] public List<int> SelectedEmployees { get; set; } = [];
    [Parameter] public string Class { get; set; }
    [Inject] private Localizer Localizer { get; set; }

    private string Label
    {
        get
        {
            if (Employees == null)
            {
                return Localizer.Employee.MissingEmployees;
            }
            var count = Employees.Count;
            if (count == 0)
            {
                return Localizer.Employee.MissingEmployees;
            }
            var selected = SelectedEmployees.Count;
            if (selected == 0 || selected == count)
            {
                return selected == 1 ?
                    Localizer.Employee.OneEmployee :
                    Localizer.Employee.AllEmployees(count);
            }
            return Localizer.Employee.SelectedEmployees(selected, count);
        }
    }

    private bool IsSelectedEmployee(Employee employee)
    {
        if (SelectedEmployees == null || !SelectedEmployees.Any())
        {
            return true;
        }
        return SelectedEmployees.Contains(employee.Id);
    }
}