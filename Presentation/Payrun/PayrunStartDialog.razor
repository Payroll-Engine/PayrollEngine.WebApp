@using PayrollEngine.Client.Service
@using PayrollEngine.Client.Model
@using PayrollEngine.WebApp.Shared
@using PayrollEngine.WebApp.ViewModel
@using PayrunJob = PayrollEngine.WebApp.ViewModel.PayrunJob
@using Task = System.Threading.Tasks.Task
@using User = PayrollEngine.WebApp.User
@using Employee = PayrollEngine.WebApp.ViewModel.Employee
@using Log = PayrollEngine.Log

<MudDialog Style="min-width: 30em;" TitleClass="mud-theme-primary pe-dialog-title">
    <DialogContent>
        <MudStack Spacing="0">
            <MudSimpleTable>
                <tbody>
                    @if (!string.IsNullOrWhiteSpace(Setup.ForecastName))
                    {
                        <tr>
                            <td style="width: 20%">@Localizer.Forecast.Name</td>
                            <td>@Setup.ForecastName</td>
                        </tr>
                    }
                    <tr>
                        <td style="width: 20%">@Localizer.PayrunJob.PayrunJob</td>
                        <td>@Setup.JobName</td>
                    </tr>
                    <tr>
                        <td style="width: 20%">@Localizer.User.User</td>
                        <td>@User.FullName</td>
                    </tr>
                    @if (Employees != null && Employees.Any())
                    {
                        <tr>
                            <td>@Localizer.Employee.Employees</td>
                            <td>@(Employees.Count) @Localizer.Employee.Employees</td>
                        </tr>
                    }
                    @if (Setup.Parameters != null && Setup.Parameters.Any())
                    {
                        <tr>
                            <td style="width: 40%">@Localizer.Payrun.Parameters</td>
                            <td>@(Setup.Parameters.Count) @Localizer.Payrun.Parameters</td>
                        </tr>
                    }
                    <tr>
                        <td style="width: 40%">@Localizer.PayrunJob.JobReason</td>
                        <td>@Setup.Reason</td>
                    </tr>
                </tbody>
            </MudSimpleTable>

            <div class="py-8">
                @if (Executing)
                {
                    <MudText Class="pb-4">
                        @Localizer.PayrunJob.JobExecuting
                    </MudText>
                    <MudProgressLinear Color="Color.Info" Rounded="true"
                                   Class="mud-table-loading-progress"
                                   Indeterminate="true" Size="Size.Large" />
                }
                @if (Failed)
                {
                    <MudText Class="pb-4" Color="Color.Error">
                        @Localizer.PayrunJob.JobFailed
                    </MudText>
                }
                @if (Completed)
                {
                    <MudText Class="pb-4" Color="Color.Success">
                        @Localizer.PayrunJob.JobCompleted
                    </MudText>
                }
            </div>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            @if (!Completed && !Failed)
            {
                <MudButton Variant="@Globals.ButtonVariant" OnClick="Cancel"
                           Disabled="@Executing">@Localizer.Dialog.Cancel</MudButton>
                <MudButton Variant="@Globals.ButtonVariant" Color="Color.Tertiary"
                           Disabled="@Executing" OnClick="Start">@Localizer.PayrunJob.JobStart</MudButton>
            }
            @if (Completed || Failed)
            {
                <MudButton Variant="@Globals.ButtonVariant" Color="Color.Info"
                           StartIcon="@Icons.Material.Filled.NavigateNext"
                           OnClick="CloseViewResults">@Localizer.PayrunResult.PayrunResults</MudButton>
                <MudButton Variant="@Globals.ButtonVariant" Color="Color.Tertiary"
                           OnClick="Close">@Localizer.Dialog.Close</MudButton>
            }
        </MudStack>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public List<Employee> Employees { get; set; }
    [Parameter] public Client.Model.Tenant Tenant { get; set; }
    [Parameter] public User User { get; set; }
    [Parameter] public Client.Model.Payroll Payroll { get; set; }
    [Parameter] public int PayrunId { get; set; }
    [Parameter] public PayrunJobSetup Setup { get; set; }

    [Inject] private IPayrunJobService PayrunJobService { get; set; }
    [Inject] private IUserNotificationService UserNotification { get; set; }
    [Inject] private Localizer Localizer { get; set; }

    private bool Executing { get; set; }
    private bool Completed { get; set; }
    private bool Failed { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private void CloseViewResults()
    {
        if (Completed)
        {
            MudDialog.Close(DialogResult.Ok(true));
            return;
        }
        MudDialog.Close(DialogResult.Cancel());
    }

    private void Close()
    {
        if (Completed)
        {
            MudDialog.Close(DialogResult.Ok(false));
            return;
        }
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task Start()
    {
        if (!Setup.Period.HasValue)
        {
            return;
        }

        try
        {
            Executing = true;
            StateHasChanged();

            // ensure UTC without the same date and time
            var jobPeriod = DateTime.SpecifyKind(Setup.Period.Value, DateTimeKind.Utc);

            // employees
            List<string> employeeIdentifiers = null;
            if (Employees != null &&
                Setup.SelectedEmployees != null &&
                Setup.SelectedEmployees.Any())
            {
                employeeIdentifiers = Employees.
                    Where(employee => Setup.SelectedEmployees.Any(selected => selected.Id == employee.Id)).
                    Select(employee => employee.Identifier).ToList();
            }

            // new payrun job
            var jobInvocation = new PayrunJobInvocation
                {
                    PayrunId = PayrunId,
                    UserId = User.Id,
                    Name = Setup.JobName,
                    Forecast = Setup.ForecastName,
                    PeriodStart = jobPeriod,
                    EmployeeIdentifiers = employeeIdentifiers,
                    Attributes = Setup.Parameters.ToDictionary(p => p.Name, p => p.GetValueByValueType()),
                    Reason = Setup.Reason,
                    // automatic retro mode
                    RetroPayMode = RetroPayMode.ValueChange
                };

            // add payrun job
            var result = await PayrunJobService.StartJobAsync<PayrunJob>(new(Tenant.Id), jobInvocation);
            if (result == null)
            {
                await UserNotification.ShowErrorMessageBoxAsync(Localizer, Localizer.PayrunJob.PayrunJob, Localizer.PayrunJob.JobFailed);
            }

            // expected exit
            Executing = false;
            Completed = true;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            // failed
            Log.Error(exception, exception.GetBaseMessage());
            Executing = false;
            Failed = true;
            StateHasChanged();
        }
    }
}
