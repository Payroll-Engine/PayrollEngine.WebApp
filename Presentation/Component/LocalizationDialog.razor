@using PayrollEngine.WebApp.Shared

<MudDialog style="min-width: 40em" TitleClass="mud-theme-primary pe-dialog-title">
    <DialogContent>
        <MudPaper Class="pa-4 mb-2" Elevation="4">
            <MudForm @ref="form">
                <MudStack Spacing="0">

                    @* base localization *@
                    @if (!string.IsNullOrWhiteSpace(LocalizationBase))
                    {
                        <MudTextField T="string"
                                      Label="@Localizer.Localization.LocalizationBase"
                                      Value="@LocalizationBase"
                                      ReadOnly="true" />
                    }

                    @* culture *@
                    <CultureSelect @bind-Culture="EditCulture"
                                   Validation="@(new Func<CultureDescription, string>(ValidateCulture))"
                                   Required="true"
                                   RequiredError="@Localizer.Error.RequiredField(Localizer.Shared.Culture)" />

                    @* localization *@
                    <MudTextField T="string" Label="@Localizer.Localization.Localization"
                                  @bind-Value="LocalizationValue"
                                  MaxLength="@MaxLength"
                                  Required="true"
                                  RequiredError="@Localizer.Error.RequiredField(Localizer.Localization.Localization)" />
                </MudStack>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="@Globals.ButtonVariant" OnClick="Cancel">@Localizer.Dialog.Cancel</MudButton>
            <MudButton Variant="@Globals.ButtonVariant" Color="Color.Primary" OnClick="Submit">@Localizer.Dialog.Ok</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    MudForm form;

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string LocalizationBase { get; set; }
    [Parameter] public IDictionary<string, string> Localizations { get; set; }
    [Parameter] public KeyValuePair<string, string> Localization { get; set; }
    [Parameter] public int MaxLength { get; set; } = 524288;

    [Inject] private ICultureService CultureService { get; set; }
    [Inject] private ILocalizerService LocalizerService { get; set; }

    private Localizer Localizer => LocalizerService.Localizer;
    private string LocalizationValue { get; set; }

    private CultureDescription EditCulture { get; set; }

    private string ValidateCulture(CultureDescription culture)
    {
        if (culture == null)
        {
            return Localizer.Error.RequiredField(Localizer.Shared.Culture);
        }

        if (Localizations != null && Localizations.ContainsKey(culture.Name))
        {
            return Localizer.Error.UniqueConflict(Localizer.Shared.Culture);
        }
        return null;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        if (await form.Revalidate() && EditCulture != null)
        {
            var result = new KeyValuePair<string, string>(EditCulture.Name, LocalizationValue);
            MudDialog.Close(DialogResult.Ok(result));
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        EditCulture = CultureService.GetCulture(Localization.Key);
        LocalizationValue = Localization.Value;
        await base.OnParametersSetAsync();
    }
}