@using System.Globalization

@foreach (var weekday in Weekdays)
{
    <MudSelectItem T="PayrollEngine.DayOfWeek?" Value="@weekday.Value">@weekday.Label</MudSelectItem>
}

@code
{
    [Parameter] public string Culture { get; set; }

    private List<LabeledValue<PayrollEngine.DayOfWeek?>> Weekdays { get; } = new();

    private void SetupWeekdays()
    {
        // culture: fallback to system culture
        var cultureName = Culture ?? CultureInfo.CurrentCulture.Name;
        var culture = CultureTool.GetCulture(cultureName);

        // day names
        var dayNames = culture.DateTimeFormat.DayNames.ToList();

        // day order
        var firstDayOfWeek = culture.DateTimeFormat.GetDayName(culture.DateTimeFormat.FirstDayOfWeek);
        var currentDay = dayNames.First();
        while (currentDay != null)
        {
            if (string.Equals(currentDay, firstDayOfWeek))
            {
                break;
            }

            // move day to the end of the week
            dayNames.Remove(currentDay);
            dayNames.Add(currentDay);

            // next day
            currentDay = dayNames.First();
        }

        // apply days
        for (var i = 0; i < dayNames.Count; i++)
        {
            Weekdays.Add(new() { Value = (PayrollEngine.DayOfWeek?)i, Label = dayNames[i] });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        SetupWeekdays();
        await base.OnInitializedAsync();
    }
}
