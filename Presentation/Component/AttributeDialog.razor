@using PayrollEngine.WebApp.Shared
<MudDialog Class="attribute-dialog">
    <DialogContent>
        <MudPaper Class="pa-4">
            <MudForm @ref="form">
                <MudStack Spacing="1">
                    <MudTextField T="string" @bind-Value="Attribute.Name"
                                  Label="@Localizer.Shared.Name"
                                  Validation="@(new Func<string, string>(ValidateName))"
                                  Required="true" RequiredError="@Localizer.Error.FieldRequired(Localizer.Shared.Name)" />
                    <MudSelect @ref="typeSelect" T="AttributeValueType" Label="@Localizer.Shared.Type" Value="Attribute.ValueType"
                               ValueChanged="ValueTypeChangedHandler">
                        <EnumSelectItems T="AttributeValueType" />
                    </MudSelect>
                    @switch (Attribute.ValueType)
                    {
                        case AttributeValueType.String:
                            <MudTextField T="string" Label="@Localizer.Shared.Value" @bind-Value="Attribute.ValuesAsString" Lines="6"
                                          Required="true" RequiredError="@Localizer.Error.FieldRequired(Localizer.Shared.Value)" />
                            <div class="d-flex flex-wrap justify-end">
                                <MudTooltip Delay="500" Text="@Localizer.Shared.JsonReformat" Placement="Placement.Bottom">
                                    <MudIconButton @onclick="@(JsonReformatAsync)"
                                                   Icon="@Icons.Material.Outlined.FormatIndentIncrease" />
                                </MudTooltip>
                            </div>
                            break;
                        case AttributeValueType.Numeric:
                            <MudNumericField T="decimal" Label="@Localizer.Shared.Value" @bind-Value="Attribute.ValuesAsNumber"
                                             Required="true" RequiredError="@Localizer.Error.FieldRequired(Localizer.Shared.Value)" />
                            break;
                        case AttributeValueType.Boolean:
                            <MudSwitch T="bool" Label="@Localizer.Shared.Value" Color="Color.Primary" @bind-Checked="Attribute.ValuesAsBoolean"
                                       Required="true" RequiredError="@Localizer.Error.FieldRequired(Localizer.Shared.Value)" />
                            break;
                    }
                </MudStack>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="Variant.Outlined" OnClick="Cancel">@Localizer.Dialog.Cancel</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Submit">@Localizer.Dialog.Ok</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    MudForm form;
    MudSelect<AttributeValueType> typeSelect;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public IDictionary<string, object> Attributes { get; set; }
    [Parameter] public AttributeItem Attribute { get; set; } = new();

    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private Localizer Localizer { get; set; }

    private string ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return Localizer.Error.FieldRequired(Localizer.Shared.Name);
        }

        if (Attributes != null && Attributes.ContainsKey(name))
        {
            return Localizer.Error.NameConflict(Localizer.Shared.Name);
        }
        return null;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        if (await form.Revalidate())
        {
            MudDialog.Close(DialogResult.Ok(Attribute));
        }
    }

    private void ValueTypeChangedHandler()
    {
        // reset value
        Attribute.Value = string.Empty;
        // change type
        Attribute.ValueType = typeSelect.Value;
        // replace value control
        StateHasChanged();
    }

    private async Task JsonReformatAsync()
    {
        var value = Attribute.ValuesAsString;
        if (string.IsNullOrWhiteSpace(value))
        {
            return;
        }

        // json prettify
        try
        {
            Attribute.Value = value.JsonPrettify();
        }
        catch (Exception exception)
        {
            Log.Trace(exception, exception.GetBaseMessage());
            await DialogService.ShowErrorMessageBoxAsync(Localizer, Localizer.Error.JsonFormatError, exception);
        }
    }
}