@page "/login"

@inherits PayrollEngine.WebApp.Presentation.PageBase;

@if (Session.UserAvailable)
{
    NavigateHome();
    return;
}

@if (Initialized && !BackendAvailable)
{
    <div>The payroll backend service is not available</div>
    return;
}


<div class="d-flex justify-center flex-grow-1">
    <MudPaper Class="pa-4" Style="min-width: 30em; max-width: 50em; margin-top: 5em">

        <MudText Typo="Typo.h4"
                 Align="Align.Center">
            @GetApplicationTitle()
        </MudText>
        <MudText Typo="Typo.h6"
                 Align="Align.Center">
            Login
        </MudText>

        <MudForm>

            @* Stage 1: User not selected, display text input for user selection *@
            @if (LoginState == UserLoginState.InputUser)
            {
                <MudTextField T="string" Class="my-4"
                          Value="@UserIdentifier"
                          AutoFocus="true"
                          Label="User"
                          MaxLength="SystemSpecification.KeyTextLength"
                          HelperText="Please enter your identification"
                          ValueChanged="UserSelected" />

                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <MudPaper Typo="Typo.caption" Class="mt-4 pa-4 mud-error">
                        @ErrorMessage
                    </MudPaper>
                }
            }

            @* Stage 2: User is selected and exists, but no tenant is selected *@
            @if (LoginState == UserLoginState.InputTenant)
            {
                <MudTextField T="string" Class="mt-4"
                          Label="User"
                          ReadOnly="true" Disabled="true"
                          Value="@UserIdentifier" />

                <MudSelect T="string" Class="my-4"
                       Value="@TenantIdentifier"
                       ValueChanged="@TenantSelected"
                       AutoFocus="true"
                       Label="Tenant"
                       HelperText="Please select your tenant">
                    @foreach (var tenant in GetUserTenants())
                    {
                        <MudSelectItem T="string" Value="@tenant.Identifier">@tenant.Identifier</MudSelectItem>
                    }
                </MudSelect>

                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <MudPaper Typo="Typo.caption" Class="mt-4 pa-4 mud-error">
                        @ErrorMessage
                    </MudPaper>
                }
            }

            @* Stage 3: User and tenant exist and are valid. *@
            @if (LoginState == UserLoginState.SetupPassword)
            {
                @* Stage 3.1: No password set for user. Show prompt for new password *@
                <MudText Typo="Typo.h5">Create new password</MudText>

                <MudTextField T="string" Class="mt-4"
                          Label="User"
                          ReadOnly="true" Disabled="true"
                          Value="@UserIdentifier" />

                <MudTextField T="string" Class="mt-4"
                          Label="Tenant"
                          ReadOnly="true" Disabled="true"
                          Value="@TenantIdentifier" />

                <MudTextField T="string" Class="mt-4"
                          @bind-Value="@NewPassword"
                          MaxLength="SystemSpecification.KeyTextLength"
                          Label="New password"
                          HelperText="Please enter new password"
                          InputType="@NewPasswordType"
                          AutoFocus="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@NewPasswordIcon"
                          OnAdornmentClick="ToggleNewPasswordVisibility"
                          AdornmentAriaLabel="Show Password" />

                <MudTextField T="string" Class="mt-4"
                          @bind-Value="@NewPasswordConfirmation"
                          MaxLength="SystemSpecification.KeyTextLength"
                          Label="Repeat new password"
                          HelperText="Please repeat new password"
                          InputType="@PasswordConfirmationType"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordConfirmationIcon"
                          OnAdornmentClick="TogglePasswordConfirmationVisibility"
                          AdornmentAriaLabel="Show Password" />

                <MudPaper Typo="Typo.caption" Class="mt-4 pa-4 mud-info">
                    Password: 1 digit, 1 lowercase, 1 uppercase, 1 special character and minimum 8 characters
                </MudPaper>

                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <MudPaper Typo="Typo.caption" Class="mt-4 pa-4 mud-error">
                        @ErrorMessage
                    </MudPaper>
                }

                <MudButton Color="Color.Primary" Class="my-4"
                       OnClick="SetPasswordAsync"
                       Variant="Variant.Outlined"
                       FullWidth="true">
                    OK
                </MudButton>
            }

            @* Stage 3.2: User, tenant and password are available, prompt password and enable login *@
            @if (LoginState == UserLoginState.InputPassword)
            {
                <MudTextField T="string" Class="mt-4"
                          Label="User"
                          ReadOnly="true" Disabled="true"
                          Value="@UserIdentifier" />

                <MudTextField T="string" Class="mt-4"
                          Label="Tenant"
                          ReadOnly="true" Disabled="true"
                          Value="@TenantIdentifier" />

                <MudTextField T="string" Class="mt-4"
                          @bind-Value="@UserPassword"
                          MaxLength="SystemSpecification.KeyTextLength"
                          Label="Password"
                          InputType="@PasswordType"
                          AutoFocus="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordIcon"
                          OnAdornmentClick="TogglePasswordVisibility"
                          AdornmentAriaLabel="Show Password" />

                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <MudPaper Typo="Typo.caption" Class="mt-4 pa-4 mud-error">
                        @ErrorMessage
                    </MudPaper>
                }

                <MudButton Color="Color.Tertiary"
                       OnClick="LoginAsync"
                       Class="my-4"
                       Variant="Variant.Outlined"
                       FullWidth="true">
                    Login
                </MudButton>
            }

        </MudForm>
    </MudPaper>
</div>