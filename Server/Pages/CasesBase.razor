@using PayrollEngine.WebApp.ViewModel
@inherits PayrollEngine.WebApp.Presentation.PageBase

<MudText Typo="Typo.h5" Class="pt-2">@PageTitle</MudText>

@if (IsTenantMissing)
{
    <div>Please select a tenant</div>
    return;
}
@if (IsPayrollMissing)
{
    <div>Please select a payroll</div>
    return;
}
@if (IsEmployeeMissing)
{
    <div>Please select an employee</div>
    return;
}

@if (HasPayrollAvailableCases)
{
    <div class="d-flex pb-2">
        <MudText Typo="Typo.h6" Class="pt-2">
            Available Cases
        </MudText>
        <div class="d-flex flex-grow-1">
            <MudTextField T="string" Style="align-self: end"
                      Value="AvailableCaseFilter"
                      Margin="Margin.Dense"
                      Clearable="true"
                      Placeholder="Search"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Small"
                      ValueChanged="AvailableCaseFilterChangedAsync"
                      Immediate="true" />
        </div>
    </div>

    @if (HasAvailableCases)
    {
        @if (HasClusters)
        {
            <MudStack Row="true" Spacing="0" Class="d-flex align-center gap-4">
                <MudChipSet MultiSelection="false" SelectedChip="SelectedCluster"
                SelectedChipChanged="SelectedClusterChanged" Class="pa-0">
                    @foreach (var cluster in Clusters)
                    {
                        <MudChip Text="@cluster"
                 Default="@string.Equals(cluster, ClusterAll)"
                 Variant="Variant.Outlined" SelectedColor="Color.Primary" />
                    }
                </MudChipSet>
            </MudStack>
        }

        @* available cases list *@
        <MudStack Row="true" Class="d-flex flex-wrap flex-grow-1 align-content-start gap-4 mt-2"
          Style="max-height: 22em; overflow-y: scroll">
            @foreach (var availableCase in AvailableCases)
            {
                var caseName = availableCase.GetLocalizedName(UserLanguage).TruncateSentence(100);
                <MudStack Spacing="0" Class="d-flex mud-elevation-4 border-solid border rounded-lg pa-2" Style="width: 17em; height: 8.5em">

                    @* case name *@
                    @{
                        var fullName = availableCase.GetLocalizedName(UserLanguage);
                        <MudTooltip Delay="500" Text="@fullName" Placement="Placement.Top">
                            <MudText Typo="Typo.body1" Style="max-height: 4em">@fullName.TruncateSentence(30)</MudText>
                        </MudTooltip>
                    }

                    @* case description *@
                    @{
                        var description = availableCase.GetLocalizedDescription(UserLanguage);
                        if (!string.IsNullOrWhiteSpace(description))
                        {
                            <MudTooltip Delay="500" Text="@description" Placement="Placement.Top">
                                <MudText Typo="Typo.caption" Style="max-height: 2em">@description.TruncateSentence(60)</MudText>
                            </MudTooltip>
                        }
                    }

                    @* case undo *@
                    <MudStack Row="true" Spacing="0" Class="flex align-end" Style="height: 100%">
                        @if (availableCase.CancellationType == CaseCancellationType.Case)
                        {
                            <MudTooltip Delay="500" Text="Case with undo" Placement="Placement.Top">
                                <MudAvatar Color="Color.Info" Variant="Variant.Outlined" Size="Size.Small">
                                    <MudIcon Icon="@Icons.Material.Filled.Undo" Size="Size.Small" Color="Color.Info" />
                                </MudAvatar>
                            </MudTooltip>
                        }
                        <MudStack Row="true" Spacing="0" Class="flex flex-grow-1 justify-end">
                            <MudTooltip Delay="500" Text="@($"Search Case {caseName}")" Placement="Placement.Top">
                                <MudIconButton @onclick="@(() => SearchCaseAsync(availableCase))"
                                   Color="Color.Primary"
                                   Variant="Variant.Outlined"
                                   Class="ml-2"
                                   Style="zoom: 0.8; height: fit-content"
                                   Icon="@Icons.Material.Filled.Search" Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Delay="500" Text="@($"Start Case {caseName}")" Placement="Placement.Top">
                                <MudIconButton @onclick="@(() => StartCase(availableCase))"
                                   Color="Color.Tertiary"
                                   Variant="Variant.Outlined"
                                   Class="ml-2"
                                   Style="zoom: 0.8; height: fit-content"
                                   Icon="@Icons.Material.Filled.Start" Size="Size.Small" />
                            </MudTooltip>
                        </MudStack>
                    </MudStack>
                </MudStack>
            }
        </MudStack>
    }
}
else
{
    <MudText>No cases available</MudText>
}

@* data grid actions *@
<div class="d-flex pb-2">
    <MudText Typo="Typo.h6" Class="pt-8">Change History</MudText>
    <div class="d-flex flex-grow-1 justify-end align-end">
        <MudTooltip Delay="500" Text="Compact view" Placement="Placement.Top">
            <MudIconButton @onclick="@ToggleGridDenseAsync"
                           Color="Color.Primary" Variant="Variant.Outlined"
                           Icon="@Icons.Material.Filled.ViewCompact"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
        <MudTooltip Delay="500" Text="Expand groups" Placement="Placement.Top">
            <MudIconButton @onclick="@ExpandItemGroups"
                           Color="Color.Primary" Variant="Variant.Outlined"
                           Icon="@Icons.Material.Filled.AccountTree"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
        <MudTooltip Delay="500" Text="Collapse groups" Placement="Placement.Top">
            <MudIconButton @onclick="@CollapseItemGroups"
                           Color="Color.Primary" Variant="Variant.Outlined"
                           Icon="@Icons.Material.Filled.TableRows"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
        <MudTooltip Delay="500" Text="Filter reset" Placement="Placement.Top">
            <MudIconButton @onclick="@ResetFilterAsync"
                           Color="Color.Primary" Variant="Variant.Outlined"
                           Icon="@Icons.Material.Filled.FilterAltOff"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
    </div>
</div>

@* data grid *@
<MudDataGrid @ref="CaseValuesGrid" T="CaseChangeCaseValue"
             Items="CaseValues"
             Groupable="true"
             GroupExpanded="true"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             Dense="@Dense"
             Hideable="false"
             ShowColumnOptions="false"
             SortMode="SortMode.None">
    <Columns>
        <PropertyColumn Property="x => x.CaseName" Title="Name"
                        Grouping="true" ShowFilterIcon="false"
                        GroupBy="CaseGroupBy" SortBy="CaseSortBy"
                        InitialDirection="SortDirection.Descending">
            <GroupTemplate>
                @{
                    var change = context.Grouping.FirstOrDefault();
                    if (change != null)
                    {
                        var caseName = UserLanguage.GetLocalization(change.CaseNameLocalizations, change.CaseName);
                        <MudTooltip Delay="500" Placement="Placement.Right">
                            <ChildContent>
                                <span style="display: inline-block; padding: 4px">
                                    @($"{caseName} • {ValueFormatter.ToCompactString(change.Created)}")
                                </span>
                            </ChildContent>
                            <TooltipContent>
                                <MudText Typo="Typo.caption">Reason</MudText>
                                <MudText Typo="Typo.body2">@change.Reason</MudText>
                            </TooltipContent>
                        </MudTooltip>

                        @* undo support *@
                        var cancellationType = change.CancellationType;
                        var cancellationId = change.CancellationId;

                        @* no undo support (CancellationType==None, CancellationId==NULL) *@
                        @* Label: "<case> - 07.12.21" *@
                        if (cancellationType == CaseCancellationType.None && cancellationId == null)
                        {
                            @* Nothing to display *@
                        }
                        @* Undoable (CancellationType!=None, CancellationId==NULL) *@
                        @* Label: "<case> - 07.12.21 [Cancel-Button]" *@
                        else if (cancellationType != CaseCancellationType.None && cancellationId == null)
                        {
                            <span style="display: inline-block; float: right; padding: 4px">
                                <MudTooltip Delay="500" Text="Undo case change" Placement="Placement.Top">
                                    <MudIconButton @onclick="@(() => CancelCaseChangeAsync(change))"
                                       Color="Color.Secondary" Variant="Variant.Outlined"
                                       Style="zoom: 0.8; height: fit-content"
                                       Icon="@Icons.Material.Filled.Undo" Size="Size.Small" />
                                </MudTooltip>
                            </span>
                        }
                        @* Undone  (CancellationType==None, CancellationId!=NULL) *@
                        @* Label: "<case> - 07.12.21, cancelled on 07.12.21" *@
                        else if (cancellationType == CaseCancellationType.None && cancellationId != null)
                        {
                            <span style="display: inline-block; float: right; padding: 4px">
                                @($" Undone • {ValueFormatter.ToCompactString(change.CancellationDate)}")
                            </span>
                        }
                        @* Undo (CancellationType!=None, CancellationId!=NULL) *@
                        @* Label: "Case 'abc' from 07.12.21" *@
                        else if (cancellationType != CaseCancellationType.None && cancellationId != null)
                        {
                            <span style="display: inline-block; float: right; padding: 4px">
                                @($" Undo • {ValueFormatter.ToCompactString(change.CancellationDate)}")
                            </span>
                        }
                    }
                    else
                    {
                        <span>@($"Case change {context.Grouping.Key}")</span>
                    }
                }
            </GroupTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.CaseFieldName" Title="Field" />
        <PropertyColumn Property="x => x.Forecast" />
        <PropertyColumn Property="x => x.Start">
            <CellTemplate>
                @ValueFormatter.ToCompactString(context.Item.Start)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.End">
            <CellTemplate>
                @ValueFormatter.ToCompactString(context.Item.End)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Created">
            <CellTemplate>
                @ValueFormatter.ToCompactString(context.Item.Created)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Value" CellStyle="text-align: right">
            <CellTemplate>
                @ValueFormatter.ToString((string)context.Item.Value,
                context.Item.ValueType)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.NumericValue" CellStyle="text-align: right"
                        Title="# Value" Format="0.####" />
        <CustomColumns T="CaseChangeCaseValue" Columns="ColumnConfiguration" />
        <TemplateColumn T="CaseChangeCaseValue" CellStyle="text-align: right">
            <HeaderTemplate>
                <MudSpacer />
                Attachments
            </HeaderTemplate>
            <FilterTemplate />
            <CellTemplate>
                @if (context.Item?.Documents > 0)
                {
                    <MudIconButton @onclick="@(() => ShowDocumentsAsync(context.Item))"
                               Color="Color.Primary" Variant="Variant.Outlined"
                               Style="zoom: 0.8"
                               Icon="@Icons.Material.Filled.AttachFile" Size="Size.Small" />
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CaseChangeCaseValue" />
    </PagerContent>
    <NoRecordsContent>
        No changes available
    </NoRecordsContent>
</MudDataGrid>
