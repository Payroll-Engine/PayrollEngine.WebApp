@using PayrollEngine.WebApp.Presentation

@typeparam T where T : PayrollEngine.Client.IModel

<TemplateColumn T="T" ShowColumnOptions="false"
                ShowFilterIcon="false" Sortable="false">
    <HeaderTemplate>
        <MudStack Row="true" Justify="Justify.FlexEnd" Class="d-flex flex-grow-1">
            <MudTooltip Delay="500" Text="@($"Add new {TypeName}")" Placement="Placement.Top">
                <MudIconButton @onclick="@ActionOperator.AddItemAsync"
                               Color="Color.Tertiary" 
                               Variant="Variant.Outlined"
                               Icon="@Icons.Material.Filled.Add"
                               Size="Size.Small" />
            </MudTooltip>
        </MudStack>
    </HeaderTemplate>
    <FilterTemplate />
    <CellTemplate>
        <MudStack Row="true">
            <MudTooltip Delay="500" Text="@($"Delete {TypeName}")" Placement="Placement.Top">
                <MudIconButton @onclick="@(() => ActionOperator.DeleteItemAsync(context.Item))"
                               Color="Color.Secondary"
                               Variant="Variant.Outlined"
                               Icon="@Icons.Material.Filled.Delete" 
                               Size="Size.Small" />
            </MudTooltip>
            <MudTooltip Delay="500" Text="@($"Edit {TypeName}")" Placement="Placement.Top">
                <MudIconButton @onclick="@(() => ActionOperator.EditItemAsync(context.Item))"
                               Color="Color.Primary" 
                               Variant="Variant.Outlined"
                               Icon="@Icons.Material.Filled.Edit" 
                               Size="Size.Small" />
            </MudTooltip>
        </MudStack>
    </CellTemplate>
</TemplateColumn>

@code {
    [Parameter] public IItemOperator<T> ActionOperator { get; set; }

    private string TypeName => 
        typeof(T).Name.ToPascalSentence();
}
