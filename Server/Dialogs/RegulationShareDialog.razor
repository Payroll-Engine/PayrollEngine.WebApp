@implements PayrollEngine.WebApp.Presentation.IItemValidator

@using PayrollEngine.WebApp.ViewModel
@using PayrollEngine.WebApp.Presentation
@using PayrollEngine.WebApp.Presentation.Component
@using PayrollEngine.WebApp.Server.Components
@using PayrollEngine.Client.Service
@using PayrollEngine.Client.QueryExpression
@using Task = System.Threading.Tasks.Task
@using System.Globalization

<MudDialog Class="item-dialog">
    <DialogContent>
        <MudForm @ref="form">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                <MudTabPanel Text="@Localizer.Shared.CommonFields">
                    <MudStack Class="pa-4" Spacing="1">
                        <MudSelect T="string"
                                   Value="RegulationShare.ProviderTenantIdentifier"
                                   ValueChanged="ProviderTenantChangedAsync"
                                   Disabled="@(Tenants == null || Tenants.Count < 1)"
                                   Label="@Localizer.RegulationShare.ProviderTenant"
                                   Required="true">
                            @foreach (var tenant in Tenants)
                            {
                                <MudSelectItem T="string" Value="@tenant.Identifier">
                                    @tenant.Identifier
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="string"
                                   Value="RegulationShare.ProviderRegulationName"
                                   ValueChanged="ProviderRegulationChanged"
                                   Disabled="@(ProviderRegulations == null || ProviderRegulations.Count < 1 || !HasProviderTenant())"
                                   Label="@Localizer.RegulationShare.ProviderRegulation"
                                   Required="true">
                            @foreach (var regulation in ProviderRegulations)
                            {
                                <MudSelectItem T="string" Value="@regulation.Name">
                                    @Culture.Name.GetLocalization(regulation.NameLocalizations, regulation.Name)
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="string"
                                   Value="RegulationShare.ConsumerTenantIdentifier"
                                   ValueChanged="ConsumerTenantChangedAsync"
                                   Disabled="@(Tenants == null || Tenants.Count < 1 || !HasProviderRegulation())"
                                   Label="@Localizer.RegulationShare.ConsumerTenant"
                                   Required="true">
                            @foreach (var tenant in Tenants)
                            {
                                // self assignments
                                if (tenant.Id == RegulationShare.ProviderTenantId)
                                {
                                    continue;
                                }
                                <MudSelectItem T="string" Value="@tenant.Identifier">
                                    @tenant.Identifier
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="string"
                                   Value="RegulationShare.ConsumerDivisionName"
                                   ValueChanged="ConsumerDivisionChanged"
                                   Clearable="true"
                                   Disabled="@(ConsumerDivisions == null || ConsumerDivisions.Count < 1 || !HasConsumerTenant())"
                                   Label="@Localizer.RegulationShare.ConsumerDivision">
                            @foreach (var division in ConsumerDivisions)
                            {
                                <MudSelectItem T="string" Value="@division.Name">
                                    @Culture.Name.GetLocalization(division.NameLocalizations, division.Name)
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <ItemBaseFields Item="RegulationShare" />
                    </MudStack>
                </MudTabPanel>
                <MudTabPanel Text="@Localizer.Attribute.Attributes">
                    <AttributesGrid Item="RegulationShare" Class="attributes-grid pa-2" />
                </MudTabPanel>
            </MudTabs>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <ItemDialogActions Item="RegulationShare" FormValidator="this" />
    </DialogActions>
</MudDialog>

@code {
    MudForm form;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public RegulationShare RegulationShare { get; set; } = new();
    [Parameter] public CultureInfo Culture { get; set; }

    [Inject] private ITenantService TenantService { get; set; }
    [Inject] private IRegulationService RegulationService { get; set; }
    [Inject] private IDivisionService DivisionService { get; set; }
    [Inject] private IUserNotificationService NotificationService { get; set; }
    [Inject] private Localizer Localizer { get; set; }

    private List<Tenant> Tenants { get; set; } = [];
    private List<Regulation> ProviderRegulations { get; set; } = [];
    private List<Division> ConsumerDivisions { get; set; } = [];

    private bool HasProviderTenant() =>
        RegulationShare.ProviderTenantId != default;

    private bool HasProviderRegulation() =>
        HasProviderTenant() & RegulationShare.ProviderRegulationId != default;

    private bool HasConsumerTenant() =>
        HasProviderRegulation() && RegulationShare.ConsumerTenantId != default;

    #region Change Handler

    private async Task ProviderTenantChangedAsync(string providerTenantIdentifier)
    {
        if (string.Equals(RegulationShare.ProviderTenantIdentifier, providerTenantIdentifier) ||
            string.Equals(RegulationShare.ConsumerTenantIdentifier, providerTenantIdentifier))
        {
            return;
        }

        var providerTenant = Tenants.FirstOrDefault(x => string.Equals(x.Identifier, providerTenantIdentifier));
        if (providerTenant == null)
        {
            return;
        }

        RegulationShare.ProviderTenantId = providerTenant.Id;
        RegulationShare.ProviderTenantIdentifier = providerTenant.Identifier;
        await SetupProviderRegulationsAsync();
        StateHasChanged();
    }

    private void ProviderRegulationChanged(string providerRegulationName)
    {
        if (string.Equals(RegulationShare.ProviderRegulationName, providerRegulationName))
        {
            return;
        }

        var providerRegulation = ProviderRegulations.FirstOrDefault(x => string.Equals(x.Name, providerRegulationName));
        if (providerRegulation == null)
        {
            return;
        }

        RegulationShare.ProviderRegulationId = providerRegulation.Id;
        RegulationShare.ProviderRegulationName = providerRegulation.Name;
        StateHasChanged();
    }

    private async Task ConsumerTenantChangedAsync(string consumerTenantIdentifier)
    {
        if (string.Equals(RegulationShare.ProviderTenantIdentifier, consumerTenantIdentifier))
        {
            return;
        }

        var consumerTenant = Tenants.FirstOrDefault(x => string.Equals(x.Identifier, consumerTenantIdentifier));
        if (consumerTenant == null)
        {
            return;
        }

        RegulationShare.ConsumerTenantId = consumerTenant.Id;
        RegulationShare.ConsumerTenantIdentifier = consumerTenant.Identifier;
        await SetupConsumerDivisionsAsync();
    }

    private void ConsumerDivisionChanged(string consumerDivisionName)
    {
        if (string.Equals(RegulationShare.ConsumerDivisionName, consumerDivisionName))
        {
            return;
        }

        var consumerDivision = ConsumerDivisions.FirstOrDefault(x => string.Equals(x.Name, consumerDivisionName));

        RegulationShare.ConsumerDivisionId = consumerDivision?.Id;
        RegulationShare.ConsumerDivisionName = consumerDivision?.Name;
    }

    #endregion

    public async Task<bool> ValidateAsync() =>
        await form.Revalidate();

    private async Task SetupConsumerDivisionsAsync()
    {
        var divisions = await DivisionService.QueryAsync<Division>(
            new(RegulationShare.ConsumerTenantId));
        ConsumerDivisions = divisions;
    }

    private async Task SetupProviderRegulationsAsync()
    {
        var regulations = await RegulationService.QueryAsync<Regulation>(
            new(RegulationShare.ProviderTenantId), new Query
                {
                    Filter = new Equals(nameof(Regulation.SharedRegulation), 1)
                });
        ProviderRegulations = regulations;

        if (!regulations.Any())
        {
            await NotificationService.ShowErrorMessageBoxAsync(
                Localizer,
                Localizer.RegulationShare.RegulationShare,
                Localizer.RegulationShare.MissingShares);
        }
    }

    private async Task SetupShareAsync()
    {
        // tenants
        Tenants = await TenantService.QueryAsync<Tenant>(new(), new()
            {
                Status = ObjectStatus.Active
            });

        // provider regulations
        if (RegulationShare.ProviderTenantId != default)
        {
            await SetupProviderRegulationsAsync();
        }

        // consumer divisions
        if (RegulationShare.ConsumerTenantId != default)
        {
            await SetupConsumerDivisionsAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(SetupShareAsync);
        await base.OnInitializedAsync();
    }
}