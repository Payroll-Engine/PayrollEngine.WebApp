@using PayrollEngine.WebApp.Presentation

<MudDialog Class="item-dialog">
    <DialogContent>
        <MudForm @ref="form" Class="pa-2">
            <MudText>@User.FirstName @User.LastName</MudText>
            <MudTextField T="string" @bind-Value="User.FirstName"
                          Label="First name" />

            <MudTextField T="string" Class="mt-4" @bind-Value="@UserPassword"
                          MaxLength="@SystemSpecification.KeyTextLength"
                          Label="Existing Password"
                          HelperText="Please enter your existing password"
                          InputType="@PasswordType"
                          AutoFocus="true"
                          Required="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordIcon"
                          OnAdornmentClick="TogglePasswordVisibility"
                          AdornmentAriaLabel="Show Password" />

            <MudTextField T="string" Class="mt-4" @bind-Value="@NewPassword"
                          MaxLength="@SystemSpecification.KeyTextLength"
                          Label="New password"
                          HelperText="Please enter new password"
                          InputType="@NewPasswordType"
                          Adornment="Adornment.End"
                          Required="true"
                          AdornmentIcon="@NewPasswordIcon"
                          OnAdornmentClick="ToggleNewPasswordVisibility"
                          AdornmentAriaLabel="Show Password" />

            <MudTextField T="string" Class="mt-4" @bind-Value="@NewPasswordConfirmation"
                          MaxLength="@SystemSpecification.KeyTextLength"
                          Label="Repeat new password"
                          HelperText="Please repeat new password"
                          InputType="@PasswordConfirmationType"
                          Required="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordConfirmationIcon"
                          OnAdornmentClick="TogglePasswordConfirmationVisibility"
                          AdornmentAriaLabel="Show Password" />

            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <MudPaper Typo="Typo.caption" Class="mt-4 pa-4 mud-error">
                    @ErrorMessage
                </MudPaper>
            }

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="ChangeAsync">Change</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    MudForm form;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Client.Model.Tenant Tenant { get; set; } = new();
    [Parameter] public Client.Model.User User { get; set; } = new();

    [Inject]
    private IUserNotificationService UserNotification { get; set; }
    [Inject]
    private IUserPasswordService UserPasswordService { get; set; }

    private string UserPassword { get; set; }
    private string NewPassword { get; set; }
    private string NewPasswordConfirmation { get; set; }
    private string ErrorMessage { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task ChangeAsync()
    {
        if (!await form.Revalidate())
        {
            return;
        }

        ResetErrorMessage();

        // valid format
        if (!UserPasswordService.IsValidPassword(NewPassword))
        {
            SetErrorMessage("Invalid password");
            return;
        }

        // valid confirmation
        if (!string.Equals(NewPassword, NewPasswordConfirmation))
        {
            SetErrorMessage("Invalid password confirmation");
            return;
        }

        try
        {
            if (!await UserPasswordService.ChangePasswordAsync(Tenant.Id, User.Id, NewPassword))
            {
                SetErrorMessage("Password change error");
                MudDialog.Close(DialogResult.Cancel());
                return;
            }

            await UserNotification.ShowMessageBoxAsync("Change Password", "Password successfully changed");
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception exception)
        {
            Log.Error(exception, exception.GetBaseMessage());
            await UserNotification.ShowErrorAsync(exception);
            MudDialog.Close(DialogResult.Cancel());
        }
    }

    private void SetErrorMessage(string message)
    {
        ErrorMessage = message;
    }

    private void ResetErrorMessage() =>
        ErrorMessage = string.Empty;

    // user password
    private bool passwordVisible;
    private InputType PasswordType { get; set; } = InputType.Password;
    private string PasswordIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    private void TogglePasswordVisibility()
    {
        if (passwordVisible)
        {
            passwordVisible = false;
            PasswordType = InputType.Password;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            passwordVisible = true;
            PasswordType = InputType.Text;
            PasswordIcon = Icons.Material.Filled.Visibility;
        }
    }

    // new user password
    private bool newPasswordVisible;
    private InputType NewPasswordType { get; set; } = InputType.Password;
    private string NewPasswordIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    private void ToggleNewPasswordVisibility()
    {
        if (newPasswordVisible)
        {
            newPasswordVisible = false;
            NewPasswordType = InputType.Password;
            NewPasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            newPasswordVisible = true;
            NewPasswordType = InputType.Text;
            NewPasswordIcon = Icons.Material.Filled.Visibility;
        }
    }

    // new user password confirmation
    private bool confirmPasswordVisible;
    private InputType PasswordConfirmationType { get; set; } = InputType.Password;
    private string PasswordConfirmationIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    private void TogglePasswordConfirmationVisibility()
    {
        if (confirmPasswordVisible)
        {
            confirmPasswordVisible = false;
            PasswordConfirmationType = InputType.Password;
            PasswordConfirmationIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            confirmPasswordVisible = true;
            PasswordConfirmationType = InputType.Text;
            PasswordConfirmationIcon = Icons.Material.Filled.Visibility;
        }
    }

}