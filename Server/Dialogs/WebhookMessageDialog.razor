@implements PayrollEngine.WebApp.Presentation.IItemValidator

@using PayrollEngine.WebApp.ViewModel
@using PayrollEngine.WebApp.Presentation
@using PayrollEngine.WebApp.Server.Components

<MudDialog Class="item-dialog">
    <DialogContent>
        <MudForm @ref="form">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                <MudTabPanel Text="@Localizer.Shared.CommonFields">
                    <MudStack Class="pa-4" Spacing="1">
                        <MudTextField T="string" @bind-Value="WebhookMessage.ActionName"
                                      MaxLength="@SystemSpecification.KeyTextLength"
                                      ReadOnly="@WebhookMessage.IsExistingObject"
                                      Label="@(WebhookMessage.IsNewObject ? $"{Localizer.Webhook.Action} ({Localizer.Shared.Immutable})" : Localizer.Webhook.Action)"
                                      Validation="@(!string.IsNullOrWhiteSpace(WebhookMessage.ActionName))"
                                      Required="true" RequiredError="@Localizer.Error.RequiredField(Localizer.Webhook.Action)" />
                        <MudTextField T="string" @bind-Value="WebhookMessage.ReceiverAddress"
                                      MaxLength="@SystemSpecification.KeyTextLength"
                                      ReadOnly="@WebhookMessage.IsExistingObject"
                                      Label="@(WebhookMessage.IsNewObject ? $"{Localizer.Webhook.ReceiverAddress} ({Localizer.Shared.Immutable})" : Localizer.Webhook.ReceiverAddress)"
                                      Validation="@(!string.IsNullOrWhiteSpace(WebhookMessage.ReceiverAddress))"
                                      Required="true" RequiredError="@Localizer.Error.RequiredField(Localizer.Webhook.ReceiverAddress)" />
                        <MudDatePicker @bind-Date="WebhookMessage.RequestDate"
                                       ReadOnly="@WebhookMessage.IsExistingObject"
                                       Label="@(WebhookMessage.IsNewObject ? $"{Localizer.WebhookMessage.RequestDate} ({Localizer.Shared.Immutable})" : Localizer.WebhookMessage.RequestDate)"
                                       Editable="true"
                                       Required="true" RequiredError="@Localizer.Error.RequiredField(Localizer.WebhookMessage.RequestDate)" />
                        <MudTextField T="string" @bind-Value="WebhookMessage.RequestMessage"
                                      ReadOnly="@WebhookMessage.IsExistingObject"
                                      Label="@(WebhookMessage.IsNewObject ? $"{Localizer.WebhookMessage.RequestMessage} ({Localizer.Shared.Immutable})" : Localizer.WebhookMessage.RequestMessage)" />
                        <MudTextField T="string" @bind-Value="WebhookMessage.RequestOperation"
                                      ReadOnly="@WebhookMessage.IsExistingObject"
                                      Label="@(WebhookMessage.IsNewObject ? $"{Localizer.WebhookMessage.RequestOperation} ({Localizer.Shared.Immutable})" : Localizer.WebhookMessage.RequestOperation)" />
                        <MudDatePicker @bind-Date="WebhookMessage.ResponseDate"
                                       Label="Response date"
                                       Editable="true" />
                        <MudNumericField T="int" @bind-Value="WebhookMessage.ResponseStatus"
                                         Label="Response status" />
                        <MudTextField T="string" @bind-Value="WebhookMessage.ResponseMessage"
                                      Label="Response message" />
                        <ItemBaseFields Item="WebhookMessage" />
                    </MudStack>
                </MudTabPanel>
            </MudTabs>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <ItemDialogActions Item="WebhookMessage" FormValidator="this" />
    </DialogActions>
</MudDialog>

@code {
    MudForm form;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public WebhookMessage WebhookMessage { get; set; } = new();
    [Inject] private Localizer Localizer { get; set; }

    public async Task<bool> ValidateAsync() =>
        await form.Revalidate();
}