@* ReSharper disable RedundantUsingDirective *@
@using PayrollEngine.Client.Service
@using PayrollEngine.WebApp.Server.Components.Shared
@* ReSharper restore RedundantUsingDirective *@

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    @*     <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
 *@

    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    @* ReSharper disable Html.PathError *@
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    @* ReSharper restore Html.PathError *@

    @* <link href="css/site.css" rel="stylesheet" /> *@

    <link rel="stylesheet" href="@Assets["css/site.css"]" />

    <ImportMap />

    <link rel="icon" type="image/png" href="favicon-16x16.png" />
    <HeadOutlet />
</head>

<body>
    @* Server side rendering only *@
    <Routes @rendermode="new InteractiveServerRenderMode(prerender: false)" />
    <HeadOutlet @rendermode="new InteractiveServerRenderMode(prerender: false)" />

    @* ReSharper disable Html.PathError *@
    @*     <script src="_framework/blazor.server.js"></script> *@
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="scripts/site.js"></script>
    @* ReSharper restore Html.PathError *@

</body>

</html>

@code
{
    [Inject]
    protected UserSession Session { get; set; }

#if DEBUG
    [Inject]
    private ITenantService TenantService { get; set; }
    [Inject]
    private IUserService UserService { get; set; }
    [Inject]
    private ITaskService TaskService { get; set; }
    [Inject]
    private IEmployeeService EmployeeService { get; set; }
    [Inject]
    private IPayrollService PayrollService { get; set; }

    [Inject]
    private UserSessionBootstrap UserSessionBootstrap { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // user session bootstrap
        if (!Session.UserAvailable)
        {
            await UserSessionBootstrap.Apply(Session,
                UserService,
                TaskService,
                TenantService,
                EmployeeService,
                PayrollService);
        }
        await base.OnInitializedAsync();
    }

#endif
}
