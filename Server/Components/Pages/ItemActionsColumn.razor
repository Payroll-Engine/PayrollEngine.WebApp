@typeparam T where T : PayrollEngine.Client.IModel

<TemplateColumn T="T" ShowColumnOptions="false"
                ShowFilterIcon="false" Sortable="false">
    <HeaderTemplate>
        <MudStack Row="true" Justify="Justify.FlexEnd" Class="d-flex flex-grow-1">
            <MudTooltip Delay="1000" Text="@Localizer.Item.CreateTitle(TypeName)" Placement="Placement.Top">
                <MudIconButton @onclick="@ActionOperator.CreateItemAsync"
                               Color="Color.Tertiary"
                               Variant="@Globals.ButtonVariant"
                               Icon="@Icons.Material.Filled.PostAdd"
                               Size="Size.Small" />
            </MudTooltip>
        </MudStack>
    </HeaderTemplate>
    <FilterTemplate />
    <CellTemplate>
        <MudStack Row="true">
            <MudTooltip Delay="1000" Text="@Localizer.Item.DeleteTitle(TypeName)" Placement="Placement.Top">
                <MudIconButton @onclick="@(() => ActionOperator.DeleteItemAsync(context.Item))"
                               Color="Color.Secondary"
                               Variant="@Globals.ButtonVariant"
                               Icon="@Icons.Material.Filled.Delete"
                               Size="Size.Small" />
            </MudTooltip>
            <MudTooltip Delay="1000" Text="@Localizer.Item.EditTitle(TypeName)" Placement="Placement.Top">
                <MudIconButton @onclick="@(() => ActionOperator.EditItemAsync(context.Item))"
                               Color="Color.Primary"
                               Variant="@Globals.ButtonVariant"
                               Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Small" />
            </MudTooltip>
        </MudStack>
    </CellTemplate>
</TemplateColumn>

@code {
    [Parameter] public IItemOperator<T> ActionOperator { get; set; }
    [Inject] private ILocalizerService LocalizerService { get; set; }

    private Localizer Localizer => LocalizerService.Localizer;

    private string TypeName
    {
        get
        {
            var name = typeof(T).Name;
            // assume group name is same as the localization key
            return Localizer.GroupKey(name);
        }
    }

}
