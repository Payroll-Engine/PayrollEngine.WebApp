@using PayrollEngine.WebApp.ViewModel
@using PayrollEngine.WebApp.Presentation.Component
@using PayrollEngine.WebApp.Server.Components.Shared

@inherits PayrollEngine.WebApp.Presentation.Component.PageBase

<MudText Typo="Typo.h5" Class="my-4 pb-1 pt-2">@PageTitle</MudText>

@* busy indicator *@
@if (IsLoading)
{
    <PageBusyIndicator />
    return;
}

@* missing tenant *@
@if (IsTenantMissing)
{
    <ErrorText Message="@Localizer.App.SelectTenant" />
    return;
}
@* missing payroll *@
@if (IsPayrollMissing)
{
    <ErrorText Message="@Localizer.App.SelectPayroll" />
    return;
}
@* missing employee *@
@if (IsEmployeeMissing)
{
    <ErrorText Message="@Localizer.App.SelectEmployee" />
    return;
}

@if (HasPayrollAvailableCases)
{
    <div class="d-flex pb-2">

        @* title *@
        <MudText Typo="Typo.h6" Class="pt-2">
            @Localizer.Case.AvailableCases
        </MudText>

        @* case tools *@
        <div class="d-flex flex-grow-1">

            @* case filter *@
            <MudTextField T="string" Style="align-self: end"
                          Value="AvailableCaseFilter"
                          Margin="Margin.Dense"
                          Clearable="true"
                          Placeholder="@Localizer.Shared.Search"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Small"
                          ValueChanged="AvailableCaseFilterChangedAsync"
                          Immediate="true" />

            @* case dense mode *@
            <MudTooltip Delay="1000" Text="@Localizer.App.CompactView" Placement="Placement.Top">
                <MudToggleIconButton @onclick="@ToggleCaseDenseAsync"
                                     Color="Color.Primary"
                                     Variant="@(CaseDense ? Globals.ButtonAltVariant : Globals.ButtonVariant)"
                                     Icon="@Icons.Material.Filled.ViewCompact"
                                     Class="ml-2"
                                     Size="Size.Small" />
            </MudTooltip>
        </div>
    </div>

    @if (HasAvailableCases)
    {
        @* case clusters *@
        @if (HasClusters)
        {
            <MudStack Row="true" Spacing="0" Class="d-flex align-center gap-4">
                <MudChipSet T="string"
                            SelectionMode="SelectionMode.SingleSelection"
                            SelectedValue="SelectedCluster"
                            SelectedValueChanged="SelectedClusterChanged"
                            Class="pa-0">
                    @foreach (var cluster in Clusters)
                    {
                        <MudChip Text="@cluster"
                                 Default="@string.Equals(cluster, ClusterAll)"
                                 Variant="@Globals.ButtonVariant"
                                 SelectedColor="Color.Primary" />
                    }
                </MudChipSet>
            </MudStack>
        }

        @* available cases list *@
        <MudPaper Class="pa-4" Elevation="4">
            <MudStack Row="true" Class="d-flex flex-wrap flex-grow-1 align-content-start gap-4 mt-2"
                      Style="max-height: 27em; overflow-y: auto; padding-bottom: 0.5rem;">
                @foreach (var availableCase in AvailableCases)
                {
                    var caseName = availableCase.GetLocalizedName(PageCulture.Name).TruncateSentence(100);
                    var height = CaseDense ? "5.5em" : "8.5em";
                    var buttonZoom = CaseDense ? "0.8" : "1";
                    <MudStack Spacing="0" Class="d-flex mud-elevation-4 border-solid border rounded-lg pa-2"
                              Style="@($"width: 17em; height: {height}; {GetCaseStyle(availableCase)}")">

                        <MudStack Row="true" Spacing="0" Class="d-flex">
                            @* case name *@
                            @{
                                var fullName = availableCase.GetLocalizedName(PageCulture.Name);
                                <MudTooltip Delay="1000" Text="@fullName" Placement="Placement.Top" RootStyle="width: 100%">
                                    <MudText Typo="Typo.body1" Style="max-height: 4em" Class="flex-grow-1">@fullName.TruncateSentence(30)</MudText>
                                </MudTooltip>
                            }

                            @* case icon *@
                            @{
                                var icon = IconTool.GetCaseIcon(availableCase, PageCulture);
                                if (!string.IsNullOrWhiteSpace(icon))
                                {
                                    <MudIcon Icon="@icon" Color="@GetCaseColor(availableCase)" />
                                }
                            }
                        </MudStack>

                        @* case description *@
                        @if (!CaseDense)
                        {
                            var description = availableCase.GetLocalizedDescription(PageCulture.Name);
                            if (!string.IsNullOrWhiteSpace(description))
                            {
                                <MudTooltip Delay="1000" Text="@description" Placement="Placement.Top">
                                    <MudText Typo="Typo.caption" Style="max-height: 2em">@description.TruncateSentence(60)</MudText>
                                </MudTooltip>
                            }
                        }

                        @* case actions *@
                        <MudStack Row="true" Spacing="0" Class="flex align-end" Style="height: 100%">
                            @if (availableCase.CancellationType == CaseCancellationType.Case)
                            {
                                @* case undo *@
                                <MudTooltip Delay="1000" Text="@Localizer.Case.UndoCase" Placement="Placement.Top">
                                    <MudAvatar Color="Color.Info" Variant="@Globals.ButtonVariant" Size="Size.Small">
                                        <MudIcon Icon="@Icons.Material.Filled.Undo" Size="Size.Small" Color="Color.Info" />
                                    </MudAvatar>
                                </MudTooltip>
                            }
                            <MudStack Row="true" Spacing="0" Class="flex flex-grow-1 justify-end">
                                <MudTooltip Delay="1000" Text="@Localizer.Case.SearchCase(caseName)" Placement="Placement.Top">
                                    @* case search *@
                                    <MudIconButton @onclick="@(() => SearchCaseAsync(availableCase))"
                                                   Color="Color.Primary"
                                                   Variant="@Globals.ButtonVariant"
                                                   Class="ml-2"
                                                   Style="@($"zoom: {buttonZoom}; height: fit-content")"
                                                   Icon="@Icons.Material.Filled.Search" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Delay="1000" Text="@Localizer.Case.StartCase(caseName)" Placement="Placement.Top">
                                    @* case start *@
                                    <MudIconButton @onclick="@(() => StartCase(availableCase))"
                                                   Color="Color.Tertiary"
                                                   Variant="@Globals.ButtonVariant"
                                                   Class="ml-2"
                                                   Style="@($"zoom: {buttonZoom}; height: fit-content")"
                                                   Icon="@Icons.Material.Filled.Start" Size="Size.Small" />
                                </MudTooltip>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                }
            </MudStack>
        </MudPaper>
    }
}
else
{
    <MudText>@Localizer.Case.NotAvailable</MudText>
}

@* data grid actions *@
<div class="d-flex pb-2">
    <MudText Typo="Typo.h6" Class="pt-8">@Localizer.Case.ChangeHistory</MudText>
    <div class="d-flex flex-grow-1 justify-end align-end">
        <MudTooltip Delay="1000" Text="@Localizer.App.CompactView" Placement="Placement.Top">
            <MudToggleIconButton @onclick="@ToggleGridDenseAsync"
                                 Color="Color.Primary"
                                 Variant="@(GridDense ? Globals.ButtonAltVariant : Globals.ButtonVariant)"
                                 Icon="@Icons.Material.Filled.ViewCompact"
                                 Class="ml-2"
                                 Size="Size.Small" />
        </MudTooltip>
        <MudTooltip Delay="1000" Text="@Localizer.App.ExpandGroups" Placement="Placement.Top">
            <MudIconButton @onclick="@ExpandItemGroups"
                           Color="Color.Primary"
                           Variant="@Globals.ButtonVariant"
                           Icon="@Icons.Material.Filled.AccountTree"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
        <MudTooltip Delay="1000" Text="@Localizer.App.CollapseGroups" Placement="Placement.Top">
            <MudIconButton @onclick="@CollapseItemGroups"
                           Color="Color.Primary"
                           Variant="@Globals.ButtonVariant"
                           Icon="@Icons.Material.Filled.TableRows"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
        <MudTooltip Delay="1000" Text="@Localizer.Shared.FilterReset" Placement="Placement.Top">
            <MudIconButton @onclick="@ResetFilterAsync"
                           Color="Color.Primary"
                           Variant="@Globals.ButtonVariant"
                           Icon="@Icons.Material.Filled.FilterAltOff"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
        <MudTooltip Delay="1000" Text="@Localizer.Shared.ExcelDownload" Placement="Placement.Top">
            <MudIconButton @onclick="@ExcelDownloadAsync"
                           Color="Color.Primary"
                           Variant="@Globals.ButtonVariant"
                           Icon="@Icons.Custom.FileFormats.FileExcel"
                           Class="ml-2"
                           Size="Size.Small" />
        </MudTooltip>
    </div>
</div>

@* data grid *@
<MudDataGrid @ref="CaseValuesGrid"
             T="CaseChangeCaseValue"
             Items="CaseValues"
             Groupable="true"
             GroupExpanded="true"
             ColumnResizeMode="ResizeMode.Column"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             Dense="@GridDense"
             Hideable="false"
             ShowColumnOptions="false"
             SortMode="SortMode.None">
    <Columns>
        <PropertyColumn Property="x => x.CaseName" Title="@Localizer.Case.Case"
                        Grouping="true" ShowFilterIcon="false"
                        GroupBy="CaseGroupBy" SortBy="CaseSortBy"
                        InitialDirection="SortDirection.Descending">
            <GroupTemplate>
                @{
                    var change = context.Grouping.FirstOrDefault();
                    if (change != null)
                    {
                        var caseName = PageCulture.Name.GetLocalization(change.CaseNameLocalizations, change.CaseName);
                        <MudTooltip Delay="1000" Placement="Placement.Right">
                            <ChildContent>
                                <span style="display: inline-block;" class="pa-1">
                                    @($"{caseName} • {ValueFormatter.ToCompactString(change.Created)}")
                                </span>
                            </ChildContent>
                            <TooltipContent>
                                <MudText Typo="Typo.caption">@Localizer.CaseChange.Reason</MudText>
                                <MudText Typo="Typo.body2">@change.Reason</MudText>
                            </TooltipContent>
                        </MudTooltip>

                        @* undo support *@
                        var cancellationType = change.CancellationType;
                        var cancellationId = change.CancellationId;

                        @* no undo support (CancellationType==None, CancellationId==NULL) *@
                        @* Label: "<case> - 07.12.21" *@
                        if (cancellationType == CaseCancellationType.None && cancellationId == null)
                        {
                            @* Nothing to display *@
                        }
                        @* Undoable (CancellationType!=None, CancellationId==NULL) *@
                        @* Label: "<case> - 07.12.21 [Cancel-Button]" *@
                        else if (cancellationType != CaseCancellationType.None && cancellationId == null)
                        {
                            <span style="display: inline-block; float: right;" class="pa-1">
                                <MudTooltip Delay="1000" Text="@Localizer.CaseChange.UndoCaseChange" Placement="Placement.Top">
                                    <MudIconButton @onclick="@(() => CancelCaseChangeAsync(change))"
                                                   Color="Color.Secondary"
                                                   Variant="@Globals.ButtonVariant"
                                                   Style="zoom: 0.8; height: fit-content"
                                                   Icon="@Icons.Material.Filled.Undo"
                                                   Size="Size.Small" />
                                </MudTooltip>
                            </span>
                        }
                        @* Undone  (CancellationId!=NULL) *@
                        @* Label: "<case> - 07.12.21, cancelled on 07.12.21" *@
                        else if (cancellationId != null)
                        {
                            <span style="display: inline-block; float: right;" class="pa-1">
                                @($" {Localizer.CaseChange.UndoCancelGroup(ValueFormatter.ToCompactString(change.CancellationDate))})")
                            </span>
                        }
                    }
                    else
                    {
                        <span>@Localizer.CaseChange.CaseChangeGroup(context.Grouping.Key)</span>
                    }
                }
            </GroupTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.CaseFieldName" Title="@Localizer.CaseField.CaseField" />
        @if (HasFeature(Feature.Forecasts))
        {
            <PropertyColumn Property="x => x.Forecast" Title="@Localizer.Forecast.Forecast" />
        }
        <PropertyColumn Property="x => x.Start" Title="@Localizer.Shared.Start">
            <CellTemplate>
                @ValueFormatter.ToCompactString(context.Item.Start)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.End" Title="@Localizer.Shared.End">
            <CellTemplate>
                @ValueFormatter.ToCompactString(context.Item.End)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Created" Title="@Localizer.Shared.ObjectCreated">
            <CellTemplate>
                @ValueFormatter.ToCompactString(context.Item.Created)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Value" Title="@Localizer.Shared.Value"
                        CellStyle="text-align: right">
            <CellTemplate>
                @* ReSharper disable once RedundantCast *@
                @ValueFormatter.ToString((string)context.Item.Value,
                         context.Item.ValueType, PageCulture)
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.NumericValue" CellStyle="text-align: right"
                        Title="@Localizer.Shared.NumericValue" Format="0.####" />
        <CustomColumns T="CaseChangeCaseValue" Columns="ColumnConfiguration" />
        <TemplateColumn T="CaseChangeCaseValue" CellStyle="text-align: right">
            <HeaderTemplate>
                <MudSpacer />
                @Localizer.Document.Attachments
            </HeaderTemplate>
            <FilterTemplate />
            <CellTemplate>
                @if (context.Item?.Documents > 0)
                {
                    <MudIconButton @onclick="@(() => ShowDocumentsAsync(context.Item))"
                                   Color="Color.Primary"
                                   Variant="@Globals.ButtonVariant"
                                   Style="zoom: 0.8"
                                   Icon="@Icons.Material.Filled.AttachFile"
                                   Size="Size.Small" />
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CaseChangeCaseValue" RowsPerPageString="@Localizer.DataGrid.PagerRowsPerPage"
                          InfoFormat="@Localizer.DataGrid.PagerInfoFormat" />
    </PagerContent>
    <NoRecordsContent>
        @Localizer.CaseChange.NotAvailable
    </NoRecordsContent>
</MudDataGrid>
