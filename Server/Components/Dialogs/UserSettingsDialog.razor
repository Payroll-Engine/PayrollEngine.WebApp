@using PayrollEngine.Client.Service
@using PayrollEngine.WebApp.Presentation.Component

<style>
    div.content > div#removeMe {
        display: none;
    }
</style>

<MudDialog Class="pe-item-dialog" TitleClass="mud-theme-primary pe-dialog-title">
    <DialogContent>
        <MudPaper Class="pa-4 mb-2" Elevation="4">
            <MudForm @ref="form">
                <MudStack Spacing="1">
                    @* user identifier *@
                    <MudTextField T="string"
                                  Value="EditUser.Identifier"
                                  ReadOnly="true"
                                  Label="@Localizer.Shared.Identifier" />
                    @* user first name *@
                    <MudTextField T="string"
                                  @bind-Value="EditUser.FirstName"
                                  MaxLength="@SystemSpecification.KeyTextLength"
                                  Label="@Localizer.User.FirstName" />
                    @* user last name *@
                    <MudTextField T="string"
                                  @bind-Value="EditUser.LastName"
                                  MaxLength="@SystemSpecification.KeyTextLength"
                                  Label="@Localizer.User.LastName" />
                    @* user culture *@
                    <CultureSelect @bind-Culture="EditCulture" />
                </MudStack>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Spacing="0" Class="mx-4 mb-2 gap-2">
            <MudButton Variant="@Globals.ButtonVariant" OnClick="Cancel">@Localizer.Dialog.Cancel</MudButton>
            <MudButton Variant="@Globals.ButtonVariant" OnClick="ChangePasswordAsync">@Localizer.User.ChangePasswordTitle</MudButton>
            <MudButton Variant="@Globals.ButtonVariant" Color="Color.Tertiary" OnClick="SubmitAsync">@Localizer.Dialog.Ok</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    private MudForm form;
    private Client.Model.User EditUser { get; set; }

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Client.Model.Tenant Tenant { get; set; } = new();
    [Parameter] public Client.Model.User User { get; set; } = new();

    [Inject] private IUserService UserService { get; set; }
    [Inject] private IUserNotificationService UserNotification { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private ICultureService CultureService { get; set; }
    [Inject] private ILocalizerService LocalizerService { get; set; }

    private Localizer Localizer => LocalizerService.Localizer;

    private CultureDescription EditCulture
    {
        get => CultureService.GetCulture(EditUser.Culture);
        set => EditUser.Culture = value?.Name;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task SubmitAsync()
    {
        if (!await form.Revalidate())
        {
            return;
        }

        // copy edit data
        CopyTool.CopyProperties(EditUser, User);

        try
        {
            await UserService.UpdateAsync(new(Tenant.Id), User);
        }
        catch (Exception exception)
        {
            Log.Error(exception, exception.GetBaseMessage());
            await UserNotification.ShowErrorAsync(exception);
        }

        MudDialog.Close(DialogResult.Ok(User));
    }

    private async Task ChangePasswordAsync()
    {
        // report parameters
        var parameters = new DialogParameters
        {
            { nameof(UserPasswordDialog.Tenant), Tenant },
            { nameof(UserPasswordDialog.User), User }
        };
        await DialogService.ShowAsync<UserPasswordDialog>(Localizer.User.ChangePasswordTitle, parameters);
    }

    protected override void OnParametersSet()
    {
        // working copy
        EditUser = new(User);
        base.OnParametersSet();
    }
}